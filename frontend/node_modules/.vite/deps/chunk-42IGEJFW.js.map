{
  "version": 3,
  "sources": ["../../@floating-ui/react-dom/dist/floating-ui.react-dom.mjs", "../../@floating-ui/react/dist/floating-ui.react.mjs", "../../@floating-ui/react/dist/floating-ui.react.utils.mjs", "../../tabbable/src/index.js"],
  "sourcesContent": ["import { computePosition, arrow as arrow$2, offset as offset$1, shift as shift$1, limitShift as limitShift$1, flip as flip$1, size as size$1, autoPlacement as autoPlacement$1, hide as hide$1, inline as inline$1 } from '@floating-ui/dom';\r\nexport { autoUpdate, computePosition, detectOverflow, getOverflowAncestors, platform } from '@floating-ui/dom';\r\nimport * as React from 'react';\r\nimport { useLayoutEffect, useEffect } from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\r\n\r\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\r\n// functions\r\nfunction deepEqual(a, b) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  if (typeof a !== typeof b) {\r\n    return false;\r\n  }\r\n  if (typeof a === 'function' && a.toString() === b.toString()) {\r\n    return true;\r\n  }\r\n  let length;\r\n  let i;\r\n  let keys;\r\n  if (a && b && typeof a === 'object') {\r\n    if (Array.isArray(a)) {\r\n      length = a.length;\r\n      if (length !== b.length) return false;\r\n      for (i = length; i-- !== 0;) {\r\n        if (!deepEqual(a[i], b[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    keys = Object.keys(a);\r\n    length = keys.length;\r\n    if (length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    for (i = length; i-- !== 0;) {\r\n      const key = keys[i];\r\n      if (key === '_owner' && a.$$typeof) {\r\n        continue;\r\n      }\r\n      if (!deepEqual(a[key], b[key])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  return a !== a && b !== b;\r\n}\r\n\r\nfunction getDPR(element) {\r\n  if (typeof window === 'undefined') {\r\n    return 1;\r\n  }\r\n  const win = element.ownerDocument.defaultView || window;\r\n  return win.devicePixelRatio || 1;\r\n}\r\n\r\nfunction roundByDPR(element, value) {\r\n  const dpr = getDPR(element);\r\n  return Math.round(value * dpr) / dpr;\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = React.useRef(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\n/**\r\n * Provides data to position a floating element.\r\n * @see https://floating-ui.com/docs/useFloating\r\n */\r\nfunction useFloating(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    placement = 'bottom',\r\n    strategy = 'absolute',\r\n    middleware = [],\r\n    platform,\r\n    elements: {\r\n      reference: externalReference,\r\n      floating: externalFloating\r\n    } = {},\r\n    transform = true,\r\n    whileElementsMounted,\r\n    open\r\n  } = options;\r\n  const [data, setData] = React.useState({\r\n    x: 0,\r\n    y: 0,\r\n    strategy,\r\n    placement,\r\n    middlewareData: {},\r\n    isPositioned: false\r\n  });\r\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\r\n  if (!deepEqual(latestMiddleware, middleware)) {\r\n    setLatestMiddleware(middleware);\r\n  }\r\n  const [_reference, _setReference] = React.useState(null);\r\n  const [_floating, _setFloating] = React.useState(null);\r\n  const setReference = React.useCallback(node => {\r\n    if (node !== referenceRef.current) {\r\n      referenceRef.current = node;\r\n      _setReference(node);\r\n    }\r\n  }, []);\r\n  const setFloating = React.useCallback(node => {\r\n    if (node !== floatingRef.current) {\r\n      floatingRef.current = node;\r\n      _setFloating(node);\r\n    }\r\n  }, []);\r\n  const referenceEl = externalReference || _reference;\r\n  const floatingEl = externalFloating || _floating;\r\n  const referenceRef = React.useRef(null);\r\n  const floatingRef = React.useRef(null);\r\n  const dataRef = React.useRef(data);\r\n  const hasWhileElementsMounted = whileElementsMounted != null;\r\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\r\n  const platformRef = useLatestRef(platform);\r\n  const openRef = useLatestRef(open);\r\n  const update = React.useCallback(() => {\r\n    if (!referenceRef.current || !floatingRef.current) {\r\n      return;\r\n    }\r\n    const config = {\r\n      placement,\r\n      strategy,\r\n      middleware: latestMiddleware\r\n    };\r\n    if (platformRef.current) {\r\n      config.platform = platformRef.current;\r\n    }\r\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\r\n      const fullData = {\r\n        ...data,\r\n        // The floating element's position may be recomputed while it's closed\r\n        // but still mounted (such as when transitioning out). To ensure\r\n        // `isPositioned` will be `false` initially on the next open, avoid\r\n        // setting it to `true` when `open === false` (must be specified).\r\n        isPositioned: openRef.current !== false\r\n      };\r\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\r\n        dataRef.current = fullData;\r\n        ReactDOM.flushSync(() => {\r\n          setData(fullData);\r\n        });\r\n      }\r\n    });\r\n  }, [latestMiddleware, placement, strategy, platformRef, openRef]);\r\n  index(() => {\r\n    if (open === false && dataRef.current.isPositioned) {\r\n      dataRef.current.isPositioned = false;\r\n      setData(data => ({\r\n        ...data,\r\n        isPositioned: false\r\n      }));\r\n    }\r\n  }, [open]);\r\n  const isMountedRef = React.useRef(false);\r\n  index(() => {\r\n    isMountedRef.current = true;\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, []);\r\n  index(() => {\r\n    if (referenceEl) referenceRef.current = referenceEl;\r\n    if (floatingEl) floatingRef.current = floatingEl;\r\n    if (referenceEl && floatingEl) {\r\n      if (whileElementsMountedRef.current) {\r\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\r\n      }\r\n      update();\r\n    }\r\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\r\n  const refs = React.useMemo(() => ({\r\n    reference: referenceRef,\r\n    floating: floatingRef,\r\n    setReference,\r\n    setFloating\r\n  }), [setReference, setFloating]);\r\n  const elements = React.useMemo(() => ({\r\n    reference: referenceEl,\r\n    floating: floatingEl\r\n  }), [referenceEl, floatingEl]);\r\n  const floatingStyles = React.useMemo(() => {\r\n    const initialStyles = {\r\n      position: strategy,\r\n      left: 0,\r\n      top: 0\r\n    };\r\n    if (!elements.floating) {\r\n      return initialStyles;\r\n    }\r\n    const x = roundByDPR(elements.floating, data.x);\r\n    const y = roundByDPR(elements.floating, data.y);\r\n    if (transform) {\r\n      return {\r\n        ...initialStyles,\r\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\r\n        ...(getDPR(elements.floating) >= 1.5 && {\r\n          willChange: 'transform'\r\n        })\r\n      };\r\n    }\r\n    return {\r\n      position: strategy,\r\n      left: x,\r\n      top: y\r\n    };\r\n  }, [strategy, transform, elements.floating, data.x, data.y]);\r\n  return React.useMemo(() => ({\r\n    ...data,\r\n    update,\r\n    refs,\r\n    elements,\r\n    floatingStyles\r\n  }), [data, update, refs, elements, floatingStyles]);\r\n}\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * This wraps the core `arrow` middleware to allow React refs as the element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow$1 = options => {\r\n  function isRef(value) {\r\n    return {}.hasOwnProperty.call(value, 'current');\r\n  }\r\n  return {\r\n    name: 'arrow',\r\n    options,\r\n    fn(state) {\r\n      const {\r\n        element,\r\n        padding\r\n      } = typeof options === 'function' ? options(state) : options;\r\n      if (element && isRef(element)) {\r\n        if (element.current != null) {\r\n          return arrow$2({\r\n            element: element.current,\r\n            padding\r\n          }).fn(state);\r\n        }\r\n        return {};\r\n      }\r\n      if (element) {\r\n        return arrow$2({\r\n          element,\r\n          padding\r\n        }).fn(state);\r\n      }\r\n      return {};\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nconst offset = (options, deps) => ({\r\n  ...offset$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nconst shift = (options, deps) => ({\r\n  ...shift$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nconst limitShift = (options, deps) => ({\r\n  ...limitShift$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nconst flip = (options, deps) => ({\r\n  ...flip$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element —\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nconst size = (options, deps) => ({\r\n  ...size$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nconst autoPlacement = (options, deps) => ({\r\n  ...autoPlacement$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nconst hide = (options, deps) => ({\r\n  ...hide$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nconst inline = (options, deps) => ({\r\n  ...inline$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * This wraps the core `arrow` middleware to allow React refs as the element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nconst arrow = (options, deps) => ({\r\n  ...arrow$1(options),\r\n  options: [options, deps]\r\n});\r\n\r\nexport { arrow, autoPlacement, flip, hide, inline, limitShift, offset, shift, size, useFloating };\r\n", "import * as React from 'react';\r\nimport { useLayoutEffect, useEffect, useRef } from 'react';\r\nimport { stopEvent, getDocument, isMouseLikePointerType, contains, activeElement, isSafari, isTypeableCombobox, isVirtualClick, isVirtualPointerEvent, getTarget, getPlatform, isTypeableElement, isReactEvent, isRootElement, isEventTargetWithin, isMac, getUserAgent } from '@floating-ui/react/utils';\r\nimport { floor, evaluate, max, min, round } from '@floating-ui/utils';\r\nimport { getComputedStyle, isElement, getNodeName, isHTMLElement, getWindow, isLastTraversableNode, getParentNode, isWebKit } from '@floating-ui/utils/dom';\r\nimport { tabbable, isTabbable } from 'tabbable';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { getOverflowAncestors, useFloating as useFloating$1, offset, detectOverflow } from '@floating-ui/react-dom';\r\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/react-dom';\r\n\r\n/**\r\n * Merges an array of refs into a single memoized callback ref or `null`.\r\n * @see https://floating-ui.com/docs/react-utils#usemergerefs\r\n */\r\nfunction useMergeRefs(refs) {\r\n  return React.useMemo(() => {\r\n    if (refs.every(ref => ref == null)) {\r\n      return null;\r\n    }\r\n    return value => {\r\n      refs.forEach(ref => {\r\n        if (typeof ref === 'function') {\r\n          ref(value);\r\n        } else if (ref != null) {\r\n          ref.current = value;\r\n        }\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, refs);\r\n}\r\n\r\n// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379\r\nconst SafeReact = {\r\n  ...React\r\n};\r\n\r\nconst useInsertionEffect = SafeReact.useInsertionEffect;\r\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\r\nfunction useEffectEvent(callback) {\r\n  const ref = React.useRef(() => {\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      throw new Error('Cannot call an event handler while rendering.');\r\n    }\r\n  });\r\n  useSafeInsertionEffect(() => {\r\n    ref.current = callback;\r\n  });\r\n  return React.useCallback(function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    return ref.current == null ? void 0 : ref.current(...args);\r\n  }, []);\r\n}\r\n\r\nconst ARROW_UP = 'ArrowUp';\r\nconst ARROW_DOWN = 'ArrowDown';\r\nconst ARROW_LEFT = 'ArrowLeft';\r\nconst ARROW_RIGHT = 'ArrowRight';\r\nfunction isDifferentRow(index, cols, prevRow) {\r\n  return Math.floor(index / cols) !== prevRow;\r\n}\r\nfunction isIndexOutOfBounds(listRef, index) {\r\n  return index < 0 || index >= listRef.current.length;\r\n}\r\nfunction getMinIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    disabledIndices\r\n  });\r\n}\r\nfunction getMaxIndex(listRef, disabledIndices) {\r\n  return findNonDisabledIndex(listRef, {\r\n    decrement: true,\r\n    startingIndex: listRef.current.length,\r\n    disabledIndices\r\n  });\r\n}\r\nfunction findNonDisabledIndex(listRef, _temp) {\r\n  let {\r\n    startingIndex = -1,\r\n    decrement = false,\r\n    disabledIndices,\r\n    amount = 1\r\n  } = _temp === void 0 ? {} : _temp;\r\n  const list = listRef.current;\r\n  let index = startingIndex;\r\n  do {\r\n    index += decrement ? -amount : amount;\r\n  } while (index >= 0 && index <= list.length - 1 && isDisabled(list, index, disabledIndices));\r\n  return index;\r\n}\r\nfunction getGridNavigatedIndex(elementsRef, _ref) {\r\n  let {\r\n    event,\r\n    orientation,\r\n    loop,\r\n    rtl,\r\n    cols,\r\n    disabledIndices,\r\n    minIndex,\r\n    maxIndex,\r\n    prevIndex,\r\n    stopEvent: stop = false\r\n  } = _ref;\r\n  let nextIndex = prevIndex;\r\n  if (event.key === ARROW_UP) {\r\n    stop && stopEvent(event);\r\n    if (prevIndex === -1) {\r\n      nextIndex = maxIndex;\r\n    } else {\r\n      nextIndex = findNonDisabledIndex(elementsRef, {\r\n        startingIndex: nextIndex,\r\n        amount: cols,\r\n        decrement: true,\r\n        disabledIndices\r\n      });\r\n      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {\r\n        const col = prevIndex % cols;\r\n        const maxCol = maxIndex % cols;\r\n        const offset = maxIndex - (maxCol - col);\r\n        if (maxCol === col) {\r\n          nextIndex = maxIndex;\r\n        } else {\r\n          nextIndex = maxCol > col ? offset : offset - cols;\r\n        }\r\n      }\r\n    }\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      nextIndex = prevIndex;\r\n    }\r\n  }\r\n  if (event.key === ARROW_DOWN) {\r\n    stop && stopEvent(event);\r\n    if (prevIndex === -1) {\r\n      nextIndex = minIndex;\r\n    } else {\r\n      nextIndex = findNonDisabledIndex(elementsRef, {\r\n        startingIndex: prevIndex,\r\n        amount: cols,\r\n        disabledIndices\r\n      });\r\n      if (loop && prevIndex + cols > maxIndex) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex % cols - cols,\r\n          amount: cols,\r\n          disabledIndices\r\n        });\r\n      }\r\n    }\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      nextIndex = prevIndex;\r\n    }\r\n  }\r\n\r\n  // Remains on the same row/column.\r\n  if (orientation === 'both') {\r\n    const prevRow = floor(prevIndex / cols);\r\n    if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {\r\n      stop && stopEvent(event);\r\n      if (prevIndex % cols !== cols - 1) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex,\r\n          disabledIndices\r\n        });\r\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\r\n          nextIndex = findNonDisabledIndex(elementsRef, {\r\n            startingIndex: prevIndex - prevIndex % cols - 1,\r\n            disabledIndices\r\n          });\r\n        }\r\n      } else if (loop) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex - prevIndex % cols - 1,\r\n          disabledIndices\r\n        });\r\n      }\r\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n    if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {\r\n      stop && stopEvent(event);\r\n      if (prevIndex % cols !== 0) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex,\r\n          decrement: true,\r\n          disabledIndices\r\n        });\r\n        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {\r\n          nextIndex = findNonDisabledIndex(elementsRef, {\r\n            startingIndex: prevIndex + (cols - prevIndex % cols),\r\n            decrement: true,\r\n            disabledIndices\r\n          });\r\n        }\r\n      } else if (loop) {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex + (cols - prevIndex % cols),\r\n          decrement: true,\r\n          disabledIndices\r\n        });\r\n      }\r\n      if (isDifferentRow(nextIndex, cols, prevRow)) {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n    const lastRow = floor(maxIndex / cols) === prevRow;\r\n    if (isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      if (loop && lastRow) {\r\n        nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledIndex(elementsRef, {\r\n          startingIndex: prevIndex - prevIndex % cols - 1,\r\n          disabledIndices\r\n        });\r\n      } else {\r\n        nextIndex = prevIndex;\r\n      }\r\n    }\r\n  }\r\n  return nextIndex;\r\n}\r\n\r\n/** For each cell index, gets the item index that occupies that cell */\r\nfunction buildCellMap(sizes, cols, dense) {\r\n  const cellMap = [];\r\n  let startIndex = 0;\r\n  sizes.forEach((_ref2, index) => {\r\n    let {\r\n      width,\r\n      height\r\n    } = _ref2;\r\n    if (width > cols) {\r\n      if (process.env.NODE_ENV !== \"production\") {\r\n        throw new Error(\"[Floating UI]: Invalid grid - item width at index \" + index + \" is greater than grid columns\");\r\n      }\r\n    }\r\n    let itemPlaced = false;\r\n    if (dense) {\r\n      startIndex = 0;\r\n    }\r\n    while (!itemPlaced) {\r\n      const targetCells = [];\r\n      for (let i = 0; i < width; i++) {\r\n        for (let j = 0; j < height; j++) {\r\n          targetCells.push(startIndex + i + j * cols);\r\n        }\r\n      }\r\n      if (startIndex % cols + width <= cols && targetCells.every(cell => cellMap[cell] == null)) {\r\n        targetCells.forEach(cell => {\r\n          cellMap[cell] = index;\r\n        });\r\n        itemPlaced = true;\r\n      } else {\r\n        startIndex++;\r\n      }\r\n    }\r\n  });\r\n\r\n  // convert into a non-sparse array\r\n  return [...cellMap];\r\n}\r\n\r\n/** Gets cell index of an item's corner or -1 when index is -1. */\r\nfunction getCellIndexOfCorner(index, sizes, cellMap, cols, corner) {\r\n  if (index === -1) return -1;\r\n  const firstCellIndex = cellMap.indexOf(index);\r\n  const sizeItem = sizes[index];\r\n  switch (corner) {\r\n    case 'tl':\r\n      return firstCellIndex;\r\n    case 'tr':\r\n      if (!sizeItem) {\r\n        return firstCellIndex;\r\n      }\r\n      return firstCellIndex + sizeItem.width - 1;\r\n    case 'bl':\r\n      if (!sizeItem) {\r\n        return firstCellIndex;\r\n      }\r\n      return firstCellIndex + (sizeItem.height - 1) * cols;\r\n    case 'br':\r\n      return cellMap.lastIndexOf(index);\r\n  }\r\n}\r\n\r\n/** Gets all cell indices that correspond to the specified indices */\r\nfunction getCellIndices(indices, cellMap) {\r\n  return cellMap.flatMap((index, cellIndex) => indices.includes(index) ? [cellIndex] : []);\r\n}\r\nfunction isDisabled(list, index, disabledIndices) {\r\n  if (disabledIndices) {\r\n    return disabledIndices.includes(index);\r\n  }\r\n  const element = list[index];\r\n  return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';\r\n}\r\n\r\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\r\n\r\nfunction sortByDocumentPosition(a, b) {\r\n  const position = a.compareDocumentPosition(b);\r\n  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n    return -1;\r\n  }\r\n  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\nfunction areMapsEqual(map1, map2) {\r\n  if (map1.size !== map2.size) {\r\n    return false;\r\n  }\r\n  for (const [key, value] of map1.entries()) {\r\n    if (value !== map2.get(key)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nconst FloatingListContext = /*#__PURE__*/React.createContext({\r\n  register: () => {},\r\n  unregister: () => {},\r\n  map: /*#__PURE__*/new Map(),\r\n  elementsRef: {\r\n    current: []\r\n  }\r\n});\r\n/**\r\n * Provides context for a list of items within the floating element.\r\n * @see https://floating-ui.com/docs/FloatingList\r\n */\r\nfunction FloatingList(props) {\r\n  const {\r\n    children,\r\n    elementsRef,\r\n    labelsRef\r\n  } = props;\r\n  const [map, setMap] = React.useState(() => new Map());\r\n  const register = React.useCallback(node => {\r\n    setMap(prevMap => new Map(prevMap).set(node, null));\r\n  }, []);\r\n  const unregister = React.useCallback(node => {\r\n    setMap(prevMap => {\r\n      const map = new Map(prevMap);\r\n      map.delete(node);\r\n      return map;\r\n    });\r\n  }, []);\r\n  index(() => {\r\n    const newMap = new Map(map);\r\n    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);\r\n    nodes.forEach((node, index) => {\r\n      newMap.set(node, index);\r\n    });\r\n    if (!areMapsEqual(map, newMap)) {\r\n      setMap(newMap);\r\n    }\r\n  }, [map]);\r\n  return /*#__PURE__*/React.createElement(FloatingListContext.Provider, {\r\n    value: React.useMemo(() => ({\r\n      register,\r\n      unregister,\r\n      map,\r\n      elementsRef,\r\n      labelsRef\r\n    }), [register, unregister, map, elementsRef, labelsRef])\r\n  }, children);\r\n}\r\n/**\r\n * Used to register a list item and its index (DOM position) in the\r\n * `FloatingList`.\r\n * @see https://floating-ui.com/docs/FloatingList#uselistitem\r\n */\r\nfunction useListItem(props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    label\r\n  } = props;\r\n  const {\r\n    register,\r\n    unregister,\r\n    map,\r\n    elementsRef,\r\n    labelsRef\r\n  } = React.useContext(FloatingListContext);\r\n  const [index$1, setIndex] = React.useState(null);\r\n  const componentRef = React.useRef(null);\r\n  const ref = React.useCallback(node => {\r\n    componentRef.current = node;\r\n    if (index$1 !== null) {\r\n      elementsRef.current[index$1] = node;\r\n      if (labelsRef) {\r\n        var _node$textContent;\r\n        const isLabelDefined = label !== undefined;\r\n        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\r\n      }\r\n    }\r\n  }, [index$1, elementsRef, labelsRef, label]);\r\n  index(() => {\r\n    const node = componentRef.current;\r\n    if (node) {\r\n      register(node);\r\n      return () => {\r\n        unregister(node);\r\n      };\r\n    }\r\n  }, [register, unregister]);\r\n  index(() => {\r\n    const index = componentRef.current ? map.get(componentRef.current) : null;\r\n    if (index != null) {\r\n      setIndex(index);\r\n    }\r\n  }, [map]);\r\n  return React.useMemo(() => ({\r\n    ref,\r\n    index: index$1 == null ? -1 : index$1\r\n  }), [index$1, ref]);\r\n}\r\n\r\nfunction renderJsx(render, computedProps) {\r\n  if (typeof render === 'function') {\r\n    return render(computedProps);\r\n  }\r\n  if (render) {\r\n    return /*#__PURE__*/React.cloneElement(render, computedProps);\r\n  }\r\n  return /*#__PURE__*/React.createElement(\"div\", computedProps);\r\n}\r\nconst CompositeContext = /*#__PURE__*/React.createContext({\r\n  activeIndex: 0,\r\n  onNavigate: () => {}\r\n});\r\nconst horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];\r\nconst verticalKeys = [ARROW_UP, ARROW_DOWN];\r\nconst allKeys = [...horizontalKeys, ...verticalKeys];\r\n\r\n/**\r\n * Creates a single tab stop whose items are navigated by arrow keys, which\r\n * provides list navigation outside of floating element contexts.\r\n *\r\n * This is useful to enable navigation of a list of items that aren’t part of a\r\n * floating element. A menubar is an example of a composite, with each reference\r\n * element being an item.\r\n * @see https://floating-ui.com/docs/Composite\r\n */\r\nconst Composite = /*#__PURE__*/React.forwardRef(function Composite(props, forwardedRef) {\r\n  const {\r\n    render,\r\n    orientation = 'both',\r\n    loop = true,\r\n    rtl = false,\r\n    cols = 1,\r\n    disabledIndices,\r\n    activeIndex: externalActiveIndex,\r\n    onNavigate: externalSetActiveIndex,\r\n    itemSizes,\r\n    dense = false,\r\n    ...domProps\r\n  } = props;\r\n  const [internalActiveIndex, internalSetActiveIndex] = React.useState(0);\r\n  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;\r\n  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);\r\n  const elementsRef = React.useRef([]);\r\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\r\n  const contextValue = React.useMemo(() => ({\r\n    activeIndex,\r\n    onNavigate\r\n  }), [activeIndex, onNavigate]);\r\n  const isGrid = cols > 1;\r\n  function handleKeyDown(event) {\r\n    if (!allKeys.includes(event.key)) return;\r\n    let nextIndex = activeIndex;\r\n    const minIndex = getMinIndex(elementsRef, disabledIndices);\r\n    const maxIndex = getMaxIndex(elementsRef, disabledIndices);\r\n    const horizontalEndKey = rtl ? ARROW_LEFT : ARROW_RIGHT;\r\n    const horizontalStartKey = rtl ? ARROW_RIGHT : ARROW_LEFT;\r\n    if (isGrid) {\r\n      const sizes = itemSizes || Array.from({\r\n        length: elementsRef.current.length\r\n      }, () => ({\r\n        width: 1,\r\n        height: 1\r\n      }));\r\n      // To calculate movements on the grid, we use hypothetical cell indices\r\n      // as if every item was 1x1, then convert back to real indices.\r\n      const cellMap = buildCellMap(sizes, cols, dense);\r\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(elementsRef.current, index, disabledIndices));\r\n      // last enabled index\r\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(elementsRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\r\n      const maybeNextIndex = cellMap[getGridNavigatedIndex({\r\n        current: cellMap.map(itemIndex => itemIndex ? elementsRef.current[itemIndex] : null)\r\n      }, {\r\n        event,\r\n        orientation,\r\n        loop,\r\n        rtl,\r\n        cols,\r\n        // treat undefined (empty grid spaces) as disabled indices so we\r\n        // don't end up in them\r\n        disabledIndices: getCellIndices([...(disabledIndices || elementsRef.current.map((_, index) => isDisabled(elementsRef.current, index) ? index : undefined)), undefined], cellMap),\r\n        minIndex: minGridIndex,\r\n        maxIndex: maxGridIndex,\r\n        prevIndex: getCellIndexOfCorner(activeIndex > maxIndex ? minIndex : activeIndex, sizes, cellMap, cols,\r\n        // use a corner matching the edge closest to the direction we're\r\n        // moving in so we don't end up in the same item. Prefer\r\n        // top/left over bottom/right.\r\n        event.key === ARROW_DOWN ? 'bl' : event.key === horizontalEndKey ? 'tr' : 'tl')\r\n      })];\r\n      if (maybeNextIndex != null) {\r\n        nextIndex = maybeNextIndex;\r\n      }\r\n    }\r\n    const toEndKeys = {\r\n      horizontal: [horizontalEndKey],\r\n      vertical: [ARROW_DOWN],\r\n      both: [horizontalEndKey, ARROW_DOWN]\r\n    }[orientation];\r\n    const toStartKeys = {\r\n      horizontal: [horizontalStartKey],\r\n      vertical: [ARROW_UP],\r\n      both: [horizontalStartKey, ARROW_UP]\r\n    }[orientation];\r\n    const preventedKeys = isGrid ? allKeys : {\r\n      horizontal: horizontalKeys,\r\n      vertical: verticalKeys,\r\n      both: allKeys\r\n    }[orientation];\r\n    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {\r\n      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {\r\n        nextIndex = minIndex;\r\n      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {\r\n        nextIndex = maxIndex;\r\n      } else {\r\n        nextIndex = findNonDisabledIndex(elementsRef, {\r\n          startingIndex: nextIndex,\r\n          decrement: toStartKeys.includes(event.key),\r\n          disabledIndices\r\n        });\r\n      }\r\n    }\r\n    if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {\r\n      var _elementsRef$current$;\r\n      event.stopPropagation();\r\n      if (preventedKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n      onNavigate(nextIndex);\r\n      (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();\r\n    }\r\n  }\r\n  const computedProps = {\r\n    ...domProps,\r\n    ...renderElementProps,\r\n    ref: forwardedRef,\r\n    'aria-orientation': orientation === 'both' ? undefined : orientation,\r\n    onKeyDown(e) {\r\n      domProps.onKeyDown == null || domProps.onKeyDown(e);\r\n      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);\r\n      handleKeyDown(e);\r\n    }\r\n  };\r\n  return /*#__PURE__*/React.createElement(CompositeContext.Provider, {\r\n    value: contextValue\r\n  }, /*#__PURE__*/React.createElement(FloatingList, {\r\n    elementsRef: elementsRef\r\n  }, renderJsx(render, computedProps)));\r\n});\r\n/**\r\n * @see https://floating-ui.com/docs/Composite\r\n */\r\nconst CompositeItem = /*#__PURE__*/React.forwardRef(function CompositeItem(props, forwardedRef) {\r\n  const {\r\n    render,\r\n    ...domProps\r\n  } = props;\r\n  const renderElementProps = render && typeof render !== 'function' ? render.props : {};\r\n  const {\r\n    activeIndex,\r\n    onNavigate\r\n  } = React.useContext(CompositeContext);\r\n  const {\r\n    ref,\r\n    index\r\n  } = useListItem();\r\n  const mergedRef = useMergeRefs([ref, forwardedRef, renderElementProps.ref]);\r\n  const isActive = activeIndex === index;\r\n  const computedProps = {\r\n    ...domProps,\r\n    ...renderElementProps,\r\n    ref: mergedRef,\r\n    tabIndex: isActive ? 0 : -1,\r\n    'data-active': isActive ? '' : undefined,\r\n    onFocus(e) {\r\n      domProps.onFocus == null || domProps.onFocus(e);\r\n      renderElementProps.onFocus == null || renderElementProps.onFocus(e);\r\n      onNavigate(index);\r\n    }\r\n  };\r\n  return renderJsx(render, computedProps);\r\n});\r\n\r\nfunction _extends() {\r\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n  return _extends.apply(this, arguments);\r\n}\r\n\r\nlet serverHandoffComplete = false;\r\nlet count = 0;\r\nconst genId = () => // Ensure the id is unique with multiple independent versions of Floating UI\r\n// on <React 18\r\n\"floating-ui-\" + Math.random().toString(36).slice(2, 6) + count++;\r\nfunction useFloatingId() {\r\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\r\n  index(() => {\r\n    if (id == null) {\r\n      setId(genId());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  React.useEffect(() => {\r\n    serverHandoffComplete = true;\r\n  }, []);\r\n  return id;\r\n}\r\nconst useReactId = SafeReact.useId;\r\n\r\n/**\r\n * Uses React 18's built-in `useId()` when available, or falls back to a\r\n * slightly less performant (requiring a double render) implementation for\r\n * earlier React versions.\r\n * @see https://floating-ui.com/docs/react-utils#useid\r\n */\r\nconst useId = useReactId || useFloatingId;\r\n\r\nlet devMessageSet;\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  devMessageSet = /*#__PURE__*/new Set();\r\n}\r\nfunction warn() {\r\n  var _devMessageSet;\r\n  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {\r\n    messages[_key] = arguments[_key];\r\n  }\r\n  const message = \"Floating UI: \" + messages.join(' ');\r\n  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {\r\n    var _devMessageSet2;\r\n    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);\r\n    console.warn(message);\r\n  }\r\n}\r\nfunction error() {\r\n  var _devMessageSet3;\r\n  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n    messages[_key2] = arguments[_key2];\r\n  }\r\n  const message = \"Floating UI: \" + messages.join(' ');\r\n  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {\r\n    var _devMessageSet4;\r\n    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);\r\n    console.error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * Renders a pointing arrow triangle.\r\n * @see https://floating-ui.com/docs/FloatingArrow\r\n */\r\nconst FloatingArrow = /*#__PURE__*/React.forwardRef(function FloatingArrow(props, ref) {\r\n  const {\r\n    context: {\r\n      placement,\r\n      elements: {\r\n        floating\r\n      },\r\n      middlewareData: {\r\n        arrow,\r\n        shift\r\n      }\r\n    },\r\n    width = 14,\r\n    height = 7,\r\n    tipRadius = 0,\r\n    strokeWidth = 0,\r\n    staticOffset,\r\n    stroke,\r\n    d,\r\n    style: {\r\n      transform,\r\n      ...restStyle\r\n    } = {},\r\n    ...rest\r\n  } = props;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    if (!ref) {\r\n      warn('The `ref` prop is required for `FloatingArrow`.');\r\n    }\r\n  }\r\n  const clipPathId = useId();\r\n  const [isRTL, setIsRTL] = React.useState(false);\r\n\r\n  // https://github.com/floating-ui/floating-ui/issues/2932\r\n  index(() => {\r\n    if (!floating) return;\r\n    const isRTL = getComputedStyle(floating).direction === 'rtl';\r\n    if (isRTL) {\r\n      setIsRTL(true);\r\n    }\r\n  }, [floating]);\r\n  if (!floating) {\r\n    return null;\r\n  }\r\n  const [side, alignment] = placement.split('-');\r\n  const isVerticalSide = side === 'top' || side === 'bottom';\r\n  let computedStaticOffset = staticOffset;\r\n  if (isVerticalSide && shift != null && shift.x || !isVerticalSide && shift != null && shift.y) {\r\n    computedStaticOffset = null;\r\n  }\r\n\r\n  // Strokes must be double the border width, this ensures the stroke's width\r\n  // works as you'd expect.\r\n  const computedStrokeWidth = strokeWidth * 2;\r\n  const halfStrokeWidth = computedStrokeWidth / 2;\r\n  const svgX = width / 2 * (tipRadius / -8 + 1);\r\n  const svgY = height / 2 * tipRadius / 4;\r\n  const isCustomShape = !!d;\r\n  const yOffsetProp = computedStaticOffset && alignment === 'end' ? 'bottom' : 'top';\r\n  let xOffsetProp = computedStaticOffset && alignment === 'end' ? 'right' : 'left';\r\n  if (computedStaticOffset && isRTL) {\r\n    xOffsetProp = alignment === 'end' ? 'left' : 'right';\r\n  }\r\n  const arrowX = (arrow == null ? void 0 : arrow.x) != null ? computedStaticOffset || arrow.x : '';\r\n  const arrowY = (arrow == null ? void 0 : arrow.y) != null ? computedStaticOffset || arrow.y : '';\r\n  const dValue = d || 'M0,0' + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + ' Z';\r\n  const rotation = {\r\n    top: isCustomShape ? 'rotate(180deg)' : '',\r\n    left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',\r\n    bottom: isCustomShape ? '' : 'rotate(180deg)',\r\n    right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'\r\n  }[side];\r\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, rest, {\r\n    \"aria-hidden\": true,\r\n    ref: ref,\r\n    width: isCustomShape ? width : width + computedStrokeWidth,\r\n    height: width,\r\n    viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\r\n    style: {\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      [xOffsetProp]: arrowX,\r\n      [yOffsetProp]: arrowY,\r\n      [side]: isVerticalSide || isCustomShape ? '100%' : \"calc(100% - \" + computedStrokeWidth / 2 + \"px)\",\r\n      transform: [rotation, transform].filter(t => !!t).join(' '),\r\n      ...restStyle\r\n    }\r\n  }), computedStrokeWidth > 0 && /*#__PURE__*/React.createElement(\"path\", {\r\n    clipPath: \"url(#\" + clipPathId + \")\",\r\n    fill: \"none\",\r\n    stroke: stroke\r\n    // Account for the stroke on the fill path rendered below.\r\n    ,\r\n    strokeWidth: computedStrokeWidth + (d ? 0 : 1),\r\n    d: dValue\r\n  }), /*#__PURE__*/React.createElement(\"path\", {\r\n    stroke: computedStrokeWidth && !d ? rest.fill : 'none',\r\n    d: dValue\r\n  }), /*#__PURE__*/React.createElement(\"clipPath\", {\r\n    id: clipPathId\r\n  }, /*#__PURE__*/React.createElement(\"rect\", {\r\n    x: -halfStrokeWidth,\r\n    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\r\n    width: width + computedStrokeWidth,\r\n    height: width\r\n  })));\r\n});\r\n\r\nfunction createPubSub() {\r\n  const map = new Map();\r\n  return {\r\n    emit(event, data) {\r\n      var _map$get;\r\n      (_map$get = map.get(event)) == null || _map$get.forEach(handler => handler(data));\r\n    },\r\n    on(event, listener) {\r\n      map.set(event, [...(map.get(event) || []), listener]);\r\n    },\r\n    off(event, listener) {\r\n      var _map$get2;\r\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);\r\n    }\r\n  };\r\n}\r\n\r\nconst FloatingNodeContext = /*#__PURE__*/React.createContext(null);\r\nconst FloatingTreeContext = /*#__PURE__*/React.createContext(null);\r\n\r\n/**\r\n * Returns the parent node id for nested floating elements, if available.\r\n * Returns `null` for top-level floating elements.\r\n */\r\nconst useFloatingParentNodeId = () => {\r\n  var _React$useContext;\r\n  return ((_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\r\n};\r\n\r\n/**\r\n * Returns the nearest floating tree context, if available.\r\n */\r\nconst useFloatingTree = () => React.useContext(FloatingTreeContext);\r\n\r\n/**\r\n * Registers a node into the `FloatingTree`, returning its id.\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction useFloatingNodeId(customParentId) {\r\n  const id = useId();\r\n  const tree = useFloatingTree();\r\n  const reactParentId = useFloatingParentNodeId();\r\n  const parentId = customParentId || reactParentId;\r\n  index(() => {\r\n    const node = {\r\n      id,\r\n      parentId\r\n    };\r\n    tree == null || tree.addNode(node);\r\n    return () => {\r\n      tree == null || tree.removeNode(node);\r\n    };\r\n  }, [tree, id, parentId]);\r\n  return id;\r\n}\r\n/**\r\n * Provides parent node context for nested floating elements.\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction FloatingNode(props) {\r\n  const {\r\n    children,\r\n    id\r\n  } = props;\r\n  const parentId = useFloatingParentNodeId();\r\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\r\n    value: React.useMemo(() => ({\r\n      id,\r\n      parentId\r\n    }), [id, parentId])\r\n  }, children);\r\n}\r\n/**\r\n * Provides context for nested floating elements when they are not children of\r\n * each other on the DOM.\r\n * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:\r\n * - The `bubbles` option in the `useDismiss()` Hook\r\n * - Nested virtual list navigation\r\n * - Nested floating elements that each open on hover\r\n * - Custom communication between parent and child floating elements\r\n * @see https://floating-ui.com/docs/FloatingTree\r\n */\r\nfunction FloatingTree(props) {\r\n  const {\r\n    children\r\n  } = props;\r\n  const nodesRef = React.useRef([]);\r\n  const addNode = React.useCallback(node => {\r\n    nodesRef.current = [...nodesRef.current, node];\r\n  }, []);\r\n  const removeNode = React.useCallback(node => {\r\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\r\n  }, []);\r\n  const events = React.useState(() => createPubSub())[0];\r\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\r\n    value: React.useMemo(() => ({\r\n      nodesRef,\r\n      addNode,\r\n      removeNode,\r\n      events\r\n    }), [addNode, removeNode, events])\r\n  }, children);\r\n}\r\n\r\nfunction createAttribute(name) {\r\n  return \"data-floating-ui-\" + name;\r\n}\r\n\r\nfunction useLatestRef(value) {\r\n  const ref = useRef(value);\r\n  index(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref;\r\n}\r\n\r\nconst safePolygonIdentifier = /*#__PURE__*/createAttribute('safe-polygon');\r\nfunction getDelay(value, prop, pointerType) {\r\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\r\n    return 0;\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value;\r\n  }\r\n  return value == null ? void 0 : value[prop];\r\n}\r\n/**\r\n * Opens the floating element while hovering over the reference element, like\r\n * CSS `:hover`.\r\n * @see https://floating-ui.com/docs/useHover\r\n */\r\nfunction useHover(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    events,\r\n    elements\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    delay = 0,\r\n    handleClose = null,\r\n    mouseOnly = false,\r\n    restMs = 0,\r\n    move = true\r\n  } = props;\r\n  const tree = useFloatingTree();\r\n  const parentId = useFloatingParentNodeId();\r\n  const handleCloseRef = useLatestRef(handleClose);\r\n  const delayRef = useLatestRef(delay);\r\n  const openRef = useLatestRef(open);\r\n  const pointerTypeRef = React.useRef();\r\n  const timeoutRef = React.useRef(-1);\r\n  const handlerRef = React.useRef();\r\n  const restTimeoutRef = React.useRef(-1);\r\n  const blockMouseMoveRef = React.useRef(true);\r\n  const performedPointerEventsMutationRef = React.useRef(false);\r\n  const unbindMouseMoveRef = React.useRef(() => {});\r\n  const restTimeoutPendingRef = React.useRef(false);\r\n  const isHoverOpen = React.useCallback(() => {\r\n    var _dataRef$current$open;\r\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\r\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\r\n  }, [dataRef]);\r\n\r\n  // When closing before opening, clear the delay timeouts to cancel it\r\n  // from showing.\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        open\r\n      } = _ref;\r\n      if (!open) {\r\n        clearTimeout(timeoutRef.current);\r\n        clearTimeout(restTimeoutRef.current);\r\n        blockMouseMoveRef.current = true;\r\n        restTimeoutPendingRef.current = false;\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n    };\r\n  }, [enabled, events]);\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    if (!handleCloseRef.current) return;\r\n    if (!open) return;\r\n    function onLeave(event) {\r\n      if (isHoverOpen()) {\r\n        onOpenChange(false, event, 'hover');\r\n      }\r\n    }\r\n    const html = getDocument(elements.floating).documentElement;\r\n    html.addEventListener('mouseleave', onLeave);\r\n    return () => {\r\n      html.removeEventListener('mouseleave', onLeave);\r\n    };\r\n  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);\r\n  const closeWithDelay = React.useCallback(function (event, runElseBranch, reason) {\r\n    if (runElseBranch === void 0) {\r\n      runElseBranch = true;\r\n    }\r\n    if (reason === void 0) {\r\n      reason = 'hover';\r\n    }\r\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\r\n    if (closeDelay && !handlerRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);\r\n    } else if (runElseBranch) {\r\n      clearTimeout(timeoutRef.current);\r\n      onOpenChange(false, event, reason);\r\n    }\r\n  }, [delayRef, onOpenChange]);\r\n  const cleanupMouseMoveHandler = useEffectEvent(() => {\r\n    unbindMouseMoveRef.current();\r\n    handlerRef.current = undefined;\r\n  });\r\n  const clearPointerEvents = useEffectEvent(() => {\r\n    if (performedPointerEventsMutationRef.current) {\r\n      const body = getDocument(elements.floating).body;\r\n      body.style.pointerEvents = '';\r\n      body.removeAttribute(safePolygonIdentifier);\r\n      performedPointerEventsMutationRef.current = false;\r\n    }\r\n  });\r\n  const isClickLikeOpenEvent = useEffectEvent(() => {\r\n    return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\r\n  });\r\n\r\n  // Registering the mouse events on the reference directly to bypass React's\r\n  // delegation system. If the cursor was on a disabled element and then entered\r\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    function onMouseEnter(event) {\r\n      clearTimeout(timeoutRef.current);\r\n      blockMouseMoveRef.current = false;\r\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, 'open')) {\r\n        return;\r\n      }\r\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\r\n      if (openDelay) {\r\n        timeoutRef.current = window.setTimeout(() => {\r\n          if (!openRef.current) {\r\n            onOpenChange(true, event, 'hover');\r\n          }\r\n        }, openDelay);\r\n      } else if (!open) {\r\n        onOpenChange(true, event, 'hover');\r\n      }\r\n    }\r\n    function onMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) return;\r\n      unbindMouseMoveRef.current();\r\n      const doc = getDocument(elements.floating);\r\n      clearTimeout(restTimeoutRef.current);\r\n      restTimeoutPendingRef.current = false;\r\n      if (handleCloseRef.current && dataRef.current.floatingContext) {\r\n        // Prevent clearing `onScrollMouseLeave` timeout.\r\n        if (!open) {\r\n          clearTimeout(timeoutRef.current);\r\n        }\r\n        handlerRef.current = handleCloseRef.current({\r\n          ...dataRef.current.floatingContext,\r\n          tree,\r\n          x: event.clientX,\r\n          y: event.clientY,\r\n          onClose() {\r\n            clearPointerEvents();\r\n            cleanupMouseMoveHandler();\r\n            if (!isClickLikeOpenEvent()) {\r\n              closeWithDelay(event, true, 'safe-polygon');\r\n            }\r\n          }\r\n        });\r\n        const handler = handlerRef.current;\r\n        doc.addEventListener('mousemove', handler);\r\n        unbindMouseMoveRef.current = () => {\r\n          doc.removeEventListener('mousemove', handler);\r\n        };\r\n        return;\r\n      }\r\n\r\n      // Allow interactivity without `safePolygon` on touch devices. With a\r\n      // pointer, a short close delay is an alternative, so it should work\r\n      // consistently.\r\n      const shouldClose = pointerTypeRef.current === 'touch' ? !contains(elements.floating, event.relatedTarget) : true;\r\n      if (shouldClose) {\r\n        closeWithDelay(event);\r\n      }\r\n    }\r\n\r\n    // Ensure the floating element closes after scrolling even if the pointer\r\n    // did not move.\r\n    // https://github.com/floating-ui/floating-ui/discussions/1692\r\n    function onScrollMouseLeave(event) {\r\n      if (isClickLikeOpenEvent()) return;\r\n      if (!dataRef.current.floatingContext) return;\r\n      handleCloseRef.current == null || handleCloseRef.current({\r\n        ...dataRef.current.floatingContext,\r\n        tree,\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n        onClose() {\r\n          clearPointerEvents();\r\n          cleanupMouseMoveHandler();\r\n          if (!isClickLikeOpenEvent()) {\r\n            closeWithDelay(event);\r\n          }\r\n        }\r\n      })(event);\r\n    }\r\n    if (isElement(elements.domReference)) {\r\n      var _elements$floating;\r\n      const ref = elements.domReference;\r\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\r\n      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener('mouseleave', onScrollMouseLeave);\r\n      move && ref.addEventListener('mousemove', onMouseEnter, {\r\n        once: true\r\n      });\r\n      ref.addEventListener('mouseenter', onMouseEnter);\r\n      ref.addEventListener('mouseleave', onMouseLeave);\r\n      return () => {\r\n        var _elements$floating2;\r\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener('mouseleave', onScrollMouseLeave);\r\n        move && ref.removeEventListener('mousemove', onMouseEnter);\r\n        ref.removeEventListener('mouseenter', onMouseEnter);\r\n        ref.removeEventListener('mouseleave', onMouseLeave);\r\n      };\r\n    }\r\n  }, [elements, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);\r\n\r\n  // Block pointer-events of every element other than the reference and floating\r\n  // while the floating element is open and has a `handleClose` handler. Also\r\n  // handles nested floating elements.\r\n  // https://github.com/floating-ui/floating-ui/issues/1722\r\n  index(() => {\r\n    var _handleCloseRef$curre;\r\n    if (!enabled) return;\r\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\r\n      performedPointerEventsMutationRef.current = true;\r\n      const floatingEl = elements.floating;\r\n      if (isElement(elements.domReference) && floatingEl) {\r\n        var _tree$nodesRef$curren;\r\n        const body = getDocument(elements.floating).body;\r\n        body.setAttribute(safePolygonIdentifier, '');\r\n        const ref = elements.domReference;\r\n        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;\r\n        if (parentFloating) {\r\n          parentFloating.style.pointerEvents = '';\r\n        }\r\n        body.style.pointerEvents = 'none';\r\n        ref.style.pointerEvents = 'auto';\r\n        floatingEl.style.pointerEvents = 'auto';\r\n        return () => {\r\n          body.style.pointerEvents = '';\r\n          ref.style.pointerEvents = '';\r\n          floatingEl.style.pointerEvents = '';\r\n        };\r\n      }\r\n    }\r\n  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);\r\n  index(() => {\r\n    if (!open) {\r\n      pointerTypeRef.current = undefined;\r\n      restTimeoutPendingRef.current = false;\r\n      cleanupMouseMoveHandler();\r\n      clearPointerEvents();\r\n    }\r\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  React.useEffect(() => {\r\n    return () => {\r\n      cleanupMouseMoveHandler();\r\n      clearTimeout(timeoutRef.current);\r\n      clearTimeout(restTimeoutRef.current);\r\n      clearPointerEvents();\r\n    };\r\n  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);\r\n  const reference = React.useMemo(() => {\r\n    function setPointerRef(event) {\r\n      pointerTypeRef.current = event.pointerType;\r\n    }\r\n    return {\r\n      onPointerDown: setPointerRef,\r\n      onPointerEnter: setPointerRef,\r\n      onMouseMove(event) {\r\n        const {\r\n          nativeEvent\r\n        } = event;\r\n        function handleMouseMove() {\r\n          if (!blockMouseMoveRef.current && !openRef.current) {\r\n            onOpenChange(true, nativeEvent, 'hover');\r\n          }\r\n        }\r\n        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {\r\n          return;\r\n        }\r\n        if (open || restMs === 0) {\r\n          return;\r\n        }\r\n\r\n        // Ignore insignificant movements to account for tremors.\r\n        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {\r\n          return;\r\n        }\r\n        clearTimeout(restTimeoutRef.current);\r\n        if (pointerTypeRef.current === 'touch') {\r\n          handleMouseMove();\r\n        } else {\r\n          restTimeoutPendingRef.current = true;\r\n          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);\r\n        }\r\n      }\r\n    };\r\n  }, [mouseOnly, onOpenChange, open, openRef, restMs]);\r\n  const floating = React.useMemo(() => ({\r\n    onMouseEnter() {\r\n      clearTimeout(timeoutRef.current);\r\n    },\r\n    onMouseLeave(event) {\r\n      if (!isClickLikeOpenEvent()) {\r\n        closeWithDelay(event.nativeEvent, false);\r\n      }\r\n    }\r\n  }), [closeWithDelay, isClickLikeOpenEvent]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference,\r\n    floating\r\n  } : {}, [enabled, reference, floating]);\r\n}\r\n\r\nconst NOOP = () => {};\r\nconst FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\r\n  delay: 0,\r\n  initialDelay: 0,\r\n  timeoutMs: 0,\r\n  currentId: null,\r\n  setCurrentId: NOOP,\r\n  setState: NOOP,\r\n  isInstantPhase: false\r\n});\r\n\r\n/**\r\n * @deprecated\r\n * Use the return value of `useDelayGroup()` instead.\r\n */\r\nconst useDelayGroupContext = () => React.useContext(FloatingDelayGroupContext);\r\n/**\r\n * Provides context for a group of floating elements that should share a\r\n * `delay`.\r\n * @see https://floating-ui.com/docs/FloatingDelayGroup\r\n */\r\nfunction FloatingDelayGroup(props) {\r\n  const {\r\n    children,\r\n    delay,\r\n    timeoutMs = 0\r\n  } = props;\r\n  const [state, setState] = React.useReducer((prev, next) => ({\r\n    ...prev,\r\n    ...next\r\n  }), {\r\n    delay,\r\n    timeoutMs,\r\n    initialDelay: delay,\r\n    currentId: null,\r\n    isInstantPhase: false\r\n  });\r\n  const initialCurrentIdRef = React.useRef(null);\r\n  const setCurrentId = React.useCallback(currentId => {\r\n    setState({\r\n      currentId\r\n    });\r\n  }, []);\r\n  index(() => {\r\n    if (state.currentId) {\r\n      if (initialCurrentIdRef.current === null) {\r\n        initialCurrentIdRef.current = state.currentId;\r\n      } else if (!state.isInstantPhase) {\r\n        setState({\r\n          isInstantPhase: true\r\n        });\r\n      }\r\n    } else {\r\n      if (state.isInstantPhase) {\r\n        setState({\r\n          isInstantPhase: false\r\n        });\r\n      }\r\n      initialCurrentIdRef.current = null;\r\n    }\r\n  }, [state.currentId, state.isInstantPhase]);\r\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\r\n    value: React.useMemo(() => ({\r\n      ...state,\r\n      setState,\r\n      setCurrentId\r\n    }), [state, setCurrentId])\r\n  }, children);\r\n}\r\n/**\r\n * Enables grouping when called inside a component that's a child of a\r\n * `FloatingDelayGroup`.\r\n * @see https://floating-ui.com/docs/FloatingDelayGroup\r\n */\r\nfunction useDelayGroup(context, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    floatingId\r\n  } = context;\r\n  const {\r\n    id: optionId,\r\n    enabled = true\r\n  } = options;\r\n  const id = optionId != null ? optionId : floatingId;\r\n  const groupContext = useDelayGroupContext();\r\n  const {\r\n    currentId,\r\n    setCurrentId,\r\n    initialDelay,\r\n    setState,\r\n    timeoutMs\r\n  } = groupContext;\r\n  index(() => {\r\n    if (!enabled) return;\r\n    if (!currentId) return;\r\n    setState({\r\n      delay: {\r\n        open: 1,\r\n        close: getDelay(initialDelay, 'close')\r\n      }\r\n    });\r\n    if (currentId !== id) {\r\n      onOpenChange(false);\r\n    }\r\n  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);\r\n  index(() => {\r\n    function unset() {\r\n      onOpenChange(false);\r\n      setState({\r\n        delay: initialDelay,\r\n        currentId: null\r\n      });\r\n    }\r\n    if (!enabled) return;\r\n    if (!currentId) return;\r\n    if (!open && currentId === id) {\r\n      if (timeoutMs) {\r\n        const timeout = window.setTimeout(unset, timeoutMs);\r\n        return () => {\r\n          clearTimeout(timeout);\r\n        };\r\n      }\r\n      unset();\r\n    }\r\n  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\r\n  index(() => {\r\n    if (!enabled) return;\r\n    if (setCurrentId === NOOP || !open) return;\r\n    setCurrentId(id);\r\n  }, [enabled, open, setCurrentId, id]);\r\n  return groupContext;\r\n}\r\n\r\nlet rafId = 0;\r\nfunction enqueueFocus(el, options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    preventScroll = false,\r\n    cancelPrevious = true,\r\n    sync = false\r\n  } = options;\r\n  cancelPrevious && cancelAnimationFrame(rafId);\r\n  const exec = () => el == null ? void 0 : el.focus({\r\n    preventScroll\r\n  });\r\n  if (sync) {\r\n    exec();\r\n  } else {\r\n    rafId = requestAnimationFrame(exec);\r\n  }\r\n}\r\n\r\nfunction getAncestors(nodes, id) {\r\n  var _nodes$find;\r\n  let allAncestors = [];\r\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\r\n  while (currentParentId) {\r\n    const currentNode = nodes.find(node => node.id === currentParentId);\r\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\r\n    if (currentNode) {\r\n      allAncestors = allAncestors.concat(currentNode);\r\n    }\r\n  }\r\n  return allAncestors;\r\n}\r\n\r\nfunction getChildren(nodes, id) {\r\n  let allChildren = nodes.filter(node => {\r\n    var _node$context;\r\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\r\n  });\r\n  let currentChildren = allChildren;\r\n  while (currentChildren.length) {\r\n    currentChildren = nodes.filter(node => {\r\n      var _currentChildren;\r\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\r\n        var _node$context2;\r\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\r\n      });\r\n    });\r\n    allChildren = allChildren.concat(currentChildren);\r\n  }\r\n  return allChildren;\r\n}\r\nfunction getDeepestNode(nodes, id) {\r\n  let deepestNodeId;\r\n  let maxDepth = -1;\r\n  function findDeepest(nodeId, depth) {\r\n    if (depth > maxDepth) {\r\n      deepestNodeId = nodeId;\r\n      maxDepth = depth;\r\n    }\r\n    const children = getChildren(nodes, nodeId);\r\n    children.forEach(child => {\r\n      findDeepest(child.id, depth + 1);\r\n    });\r\n  }\r\n  findDeepest(id, 0);\r\n  return nodes.find(node => node.id === deepestNodeId);\r\n}\r\n\r\n// Modified to add conditional `aria-hidden` support:\r\n// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts\r\nlet counterMap = /*#__PURE__*/new WeakMap();\r\nlet uncontrolledElementsSet = /*#__PURE__*/new WeakSet();\r\nlet markerMap = {};\r\nlet lockCount$1 = 0;\r\nconst supportsInert = () => typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;\r\nconst unwrapHost = node => node && (node.host || unwrapHost(node.parentNode));\r\nconst correctElements = (parent, targets) => targets.map(target => {\r\n  if (parent.contains(target)) {\r\n    return target;\r\n  }\r\n  const correctedTarget = unwrapHost(target);\r\n  if (parent.contains(correctedTarget)) {\r\n    return correctedTarget;\r\n  }\r\n  return null;\r\n}).filter(x => x != null);\r\nfunction applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {\r\n  const markerName = 'data-floating-ui-inert';\r\n  const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;\r\n  const avoidElements = correctElements(body, uncorrectedAvoidElements);\r\n  const elementsToKeep = new Set();\r\n  const elementsToStop = new Set(avoidElements);\r\n  const hiddenElements = [];\r\n  if (!markerMap[markerName]) {\r\n    markerMap[markerName] = new WeakMap();\r\n  }\r\n  const markerCounter = markerMap[markerName];\r\n  avoidElements.forEach(keep);\r\n  deep(body);\r\n  elementsToKeep.clear();\r\n  function keep(el) {\r\n    if (!el || elementsToKeep.has(el)) {\r\n      return;\r\n    }\r\n    elementsToKeep.add(el);\r\n    el.parentNode && keep(el.parentNode);\r\n  }\r\n  function deep(parent) {\r\n    if (!parent || elementsToStop.has(parent)) {\r\n      return;\r\n    }\r\n    [].forEach.call(parent.children, node => {\r\n      if (getNodeName(node) === 'script') return;\r\n      if (elementsToKeep.has(node)) {\r\n        deep(node);\r\n      } else {\r\n        const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;\r\n        const alreadyHidden = attr !== null && attr !== 'false';\r\n        const counterValue = (counterMap.get(node) || 0) + 1;\r\n        const markerValue = (markerCounter.get(node) || 0) + 1;\r\n        counterMap.set(node, counterValue);\r\n        markerCounter.set(node, markerValue);\r\n        hiddenElements.push(node);\r\n        if (counterValue === 1 && alreadyHidden) {\r\n          uncontrolledElementsSet.add(node);\r\n        }\r\n        if (markerValue === 1) {\r\n          node.setAttribute(markerName, '');\r\n        }\r\n        if (!alreadyHidden && controlAttribute) {\r\n          node.setAttribute(controlAttribute, 'true');\r\n        }\r\n      }\r\n    });\r\n  }\r\n  lockCount$1++;\r\n  return () => {\r\n    hiddenElements.forEach(element => {\r\n      const counterValue = (counterMap.get(element) || 0) - 1;\r\n      const markerValue = (markerCounter.get(element) || 0) - 1;\r\n      counterMap.set(element, counterValue);\r\n      markerCounter.set(element, markerValue);\r\n      if (!counterValue) {\r\n        if (!uncontrolledElementsSet.has(element) && controlAttribute) {\r\n          element.removeAttribute(controlAttribute);\r\n        }\r\n        uncontrolledElementsSet.delete(element);\r\n      }\r\n      if (!markerValue) {\r\n        element.removeAttribute(markerName);\r\n      }\r\n    });\r\n    lockCount$1--;\r\n    if (!lockCount$1) {\r\n      counterMap = new WeakMap();\r\n      counterMap = new WeakMap();\r\n      uncontrolledElementsSet = new WeakSet();\r\n      markerMap = {};\r\n    }\r\n  };\r\n}\r\nfunction markOthers(avoidElements, ariaHidden, inert) {\r\n  if (ariaHidden === void 0) {\r\n    ariaHidden = false;\r\n  }\r\n  if (inert === void 0) {\r\n    inert = false;\r\n  }\r\n  const body = getDocument(avoidElements[0]).body;\r\n  return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);\r\n}\r\n\r\nconst getTabbableOptions = () => ({\r\n  getShadowRoot: true,\r\n  displayCheck:\r\n  // JSDOM does not support the `tabbable` library. To solve this we can\r\n  // check if `ResizeObserver` is a real function (not polyfilled), which\r\n  // determines if the current environment is JSDOM-like.\r\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\r\n});\r\nfunction getTabbableIn(container, direction) {\r\n  const allTabbable = tabbable(container, getTabbableOptions());\r\n  if (direction === 'prev') {\r\n    allTabbable.reverse();\r\n  }\r\n  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));\r\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\r\n  return nextTabbableElements[0];\r\n}\r\nfunction getNextTabbable() {\r\n  return getTabbableIn(document.body, 'next');\r\n}\r\nfunction getPreviousTabbable() {\r\n  return getTabbableIn(document.body, 'prev');\r\n}\r\nfunction isOutsideEvent(event, container) {\r\n  const containerElement = container || event.currentTarget;\r\n  const relatedTarget = event.relatedTarget;\r\n  return !relatedTarget || !contains(containerElement, relatedTarget);\r\n}\r\nfunction disableFocusInside(container) {\r\n  const tabbableElements = tabbable(container, getTabbableOptions());\r\n  tabbableElements.forEach(element => {\r\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\r\n    element.setAttribute('tabindex', '-1');\r\n  });\r\n}\r\nfunction enableFocusInside(container) {\r\n  const elements = container.querySelectorAll('[data-tabindex]');\r\n  elements.forEach(element => {\r\n    const tabindex = element.dataset.tabindex;\r\n    delete element.dataset.tabindex;\r\n    if (tabindex) {\r\n      element.setAttribute('tabindex', tabindex);\r\n    } else {\r\n      element.removeAttribute('tabindex');\r\n    }\r\n  });\r\n}\r\n\r\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\r\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\r\n\r\nconst HIDDEN_STYLES = {\r\n  border: 0,\r\n  clip: 'rect(0 0 0 0)',\r\n  height: '1px',\r\n  margin: '-1px',\r\n  overflow: 'hidden',\r\n  padding: 0,\r\n  position: 'fixed',\r\n  whiteSpace: 'nowrap',\r\n  width: '1px',\r\n  top: 0,\r\n  left: 0\r\n};\r\nlet timeoutId;\r\nfunction setActiveElementOnTab(event) {\r\n  if (event.key === 'Tab') {\r\n    event.target;\r\n    clearTimeout(timeoutId);\r\n  }\r\n}\r\nconst FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\r\n  const [role, setRole] = React.useState();\r\n  index(() => {\r\n    if (isSafari()) {\r\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\r\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\r\n      // trap element. On Safari, only buttons trigger the onFocus event.\r\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\r\n      // button role.\r\n      setRole('button');\r\n    }\r\n    document.addEventListener('keydown', setActiveElementOnTab);\r\n    return () => {\r\n      document.removeEventListener('keydown', setActiveElementOnTab);\r\n    };\r\n  }, []);\r\n  const restProps = {\r\n    ref,\r\n    tabIndex: 0,\r\n    // Role is only for VoiceOver\r\n    role,\r\n    'aria-hidden': role ? undefined : true,\r\n    [createAttribute('focus-guard')]: '',\r\n    style: HIDDEN_STYLES\r\n  };\r\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, restProps));\r\n});\r\n\r\nconst PortalContext = /*#__PURE__*/React.createContext(null);\r\nconst attr = /*#__PURE__*/createAttribute('portal');\r\n/**\r\n * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode\r\n */\r\nfunction useFloatingPortalNode(props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    id,\r\n    root\r\n  } = props;\r\n  const uniqueId = useId();\r\n  const portalContext = usePortalContext();\r\n  const [portalNode, setPortalNode] = React.useState(null);\r\n  const portalNodeRef = React.useRef(null);\r\n  index(() => {\r\n    return () => {\r\n      portalNode == null || portalNode.remove();\r\n      // Allow the subsequent layout effects to create a new node on updates.\r\n      // The portal node will still be cleaned up on unmount.\r\n      // https://github.com/floating-ui/floating-ui/issues/2454\r\n      queueMicrotask(() => {\r\n        portalNodeRef.current = null;\r\n      });\r\n    };\r\n  }, [portalNode]);\r\n  index(() => {\r\n    // Wait for the uniqueId to be generated before creating the portal node in\r\n    // React <18 (using `useFloatingId` instead of the native `useId`).\r\n    // https://github.com/floating-ui/floating-ui/issues/2778\r\n    if (!uniqueId) return;\r\n    if (portalNodeRef.current) return;\r\n    const existingIdRoot = id ? document.getElementById(id) : null;\r\n    if (!existingIdRoot) return;\r\n    const subRoot = document.createElement('div');\r\n    subRoot.id = uniqueId;\r\n    subRoot.setAttribute(attr, '');\r\n    existingIdRoot.appendChild(subRoot);\r\n    portalNodeRef.current = subRoot;\r\n    setPortalNode(subRoot);\r\n  }, [id, uniqueId]);\r\n  index(() => {\r\n    // Wait for the root to exist before creating the portal node. The root must\r\n    // be stored in state, not a ref, for this to work reactively.\r\n    if (root === null) return;\r\n    if (!uniqueId) return;\r\n    if (portalNodeRef.current) return;\r\n    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);\r\n    if (container && !isElement(container)) container = container.current;\r\n    container = container || document.body;\r\n    let idWrapper = null;\r\n    if (id) {\r\n      idWrapper = document.createElement('div');\r\n      idWrapper.id = id;\r\n      container.appendChild(idWrapper);\r\n    }\r\n    const subRoot = document.createElement('div');\r\n    subRoot.id = uniqueId;\r\n    subRoot.setAttribute(attr, '');\r\n    container = idWrapper || container;\r\n    container.appendChild(subRoot);\r\n    portalNodeRef.current = subRoot;\r\n    setPortalNode(subRoot);\r\n  }, [id, root, uniqueId, portalContext]);\r\n  return portalNode;\r\n}\r\n/**\r\n * Portals the floating element into a given container element — by default,\r\n * outside of the app root and into the body.\r\n * This is necessary to ensure the floating element can appear outside any\r\n * potential parent containers that cause clipping (such as `overflow: hidden`),\r\n * while retaining its location in the React tree.\r\n * @see https://floating-ui.com/docs/FloatingPortal\r\n */\r\nfunction FloatingPortal(props) {\r\n  const {\r\n    children,\r\n    id,\r\n    root,\r\n    preserveTabOrder = true\r\n  } = props;\r\n  const portalNode = useFloatingPortalNode({\r\n    id,\r\n    root\r\n  });\r\n  const [focusManagerState, setFocusManagerState] = React.useState(null);\r\n  const beforeOutsideRef = React.useRef(null);\r\n  const afterOutsideRef = React.useRef(null);\r\n  const beforeInsideRef = React.useRef(null);\r\n  const afterInsideRef = React.useRef(null);\r\n  const modal = focusManagerState == null ? void 0 : focusManagerState.modal;\r\n  const open = focusManagerState == null ? void 0 : focusManagerState.open;\r\n  const shouldRenderGuards =\r\n  // The FocusManager and therefore floating element are currently open/\r\n  // rendered.\r\n  !!focusManagerState &&\r\n  // Guards are only for non-modal focus management.\r\n  !focusManagerState.modal &&\r\n  // Don't render if unmount is transitioning.\r\n  focusManagerState.open && preserveTabOrder && !!(root || portalNode);\r\n\r\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\r\n  React.useEffect(() => {\r\n    if (!portalNode || !preserveTabOrder || modal) {\r\n      return;\r\n    }\r\n\r\n    // Make sure elements inside the portal element are tabbable only when the\r\n    // portal has already been focused, either by tabbing into a focus trap\r\n    // element outside or using the mouse.\r\n    function onFocus(event) {\r\n      if (portalNode && isOutsideEvent(event)) {\r\n        const focusing = event.type === 'focusin';\r\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\r\n        manageFocus(portalNode);\r\n      }\r\n    }\r\n    // Listen to the event on the capture phase so they run before the focus\r\n    // trap elements onFocus prop is called.\r\n    portalNode.addEventListener('focusin', onFocus, true);\r\n    portalNode.addEventListener('focusout', onFocus, true);\r\n    return () => {\r\n      portalNode.removeEventListener('focusin', onFocus, true);\r\n      portalNode.removeEventListener('focusout', onFocus, true);\r\n    };\r\n  }, [portalNode, preserveTabOrder, modal]);\r\n  React.useEffect(() => {\r\n    if (!portalNode) return;\r\n    if (open) return;\r\n    enableFocusInside(portalNode);\r\n  }, [open, portalNode]);\r\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\r\n    value: React.useMemo(() => ({\r\n      preserveTabOrder,\r\n      beforeOutsideRef,\r\n      afterOutsideRef,\r\n      beforeInsideRef,\r\n      afterInsideRef,\r\n      portalNode,\r\n      setFocusManagerState\r\n    }), [preserveTabOrder, portalNode])\r\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: beforeOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _beforeInsideRef$curr;\r\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();\r\n      } else {\r\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        prevTabbable == null || prevTabbable.focus();\r\n      }\r\n    }\r\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(\"span\", {\r\n    \"aria-owns\": portalNode.id,\r\n    style: HIDDEN_STYLES\r\n  }), portalNode && /*#__PURE__*/ReactDOM.createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\r\n    \"data-type\": \"outside\",\r\n    ref: afterOutsideRef,\r\n    onFocus: event => {\r\n      if (isOutsideEvent(event, portalNode)) {\r\n        var _afterInsideRef$curre;\r\n        (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();\r\n      } else {\r\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\r\n        nextTabbable == null || nextTabbable.focus();\r\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, 'focus-out'));\r\n      }\r\n    }\r\n  }));\r\n}\r\nconst usePortalContext = () => React.useContext(PortalContext);\r\n\r\nconst FOCUSABLE_ATTRIBUTE = 'data-floating-ui-focusable';\r\nfunction getFloatingFocusElement(floatingElement) {\r\n  if (!floatingElement) {\r\n    return null;\r\n  }\r\n  // Try to find the element that has `{...getFloatingProps()}` spread on it.\r\n  // This indicates the floating element is acting as a positioning wrapper, and\r\n  // so focus should be managed on the child element with the event handlers and\r\n  // aria props.\r\n  return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector(\"[\" + FOCUSABLE_ATTRIBUTE + \"]\") || floatingElement;\r\n}\r\n\r\nconst LIST_LIMIT = 20;\r\nlet previouslyFocusedElements = [];\r\nfunction addPreviouslyFocusedElement(element) {\r\n  previouslyFocusedElements = previouslyFocusedElements.filter(el => el.isConnected);\r\n  let tabbableEl = element;\r\n  if (!tabbableEl || getNodeName(tabbableEl) === 'body') return;\r\n  if (!isTabbable(tabbableEl, getTabbableOptions())) {\r\n    const tabbableChild = tabbable(tabbableEl, getTabbableOptions())[0];\r\n    if (tabbableChild) {\r\n      tabbableEl = tabbableChild;\r\n    }\r\n  }\r\n  previouslyFocusedElements.push(tabbableEl);\r\n  if (previouslyFocusedElements.length > LIST_LIMIT) {\r\n    previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);\r\n  }\r\n}\r\nfunction getPreviouslyFocusedElement() {\r\n  return previouslyFocusedElements.slice().reverse().find(el => el.isConnected);\r\n}\r\nconst VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {\r\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\r\n    type: \"button\",\r\n    ref: ref,\r\n    tabIndex: -1,\r\n    style: HIDDEN_STYLES\r\n  }));\r\n});\r\n/**\r\n * Provides focus management for the floating element.\r\n * @see https://floating-ui.com/docs/FloatingFocusManager\r\n */\r\nfunction FloatingFocusManager(props) {\r\n  const {\r\n    context,\r\n    children,\r\n    disabled = false,\r\n    order = ['content'],\r\n    guards: _guards = true,\r\n    initialFocus = 0,\r\n    returnFocus = true,\r\n    restoreFocus = false,\r\n    modal = true,\r\n    visuallyHiddenDismiss = false,\r\n    closeOnFocusOut = true\r\n  } = props;\r\n  const {\r\n    open,\r\n    refs,\r\n    nodeId,\r\n    onOpenChange,\r\n    events,\r\n    dataRef,\r\n    floatingId,\r\n    elements: {\r\n      domReference,\r\n      floating\r\n    }\r\n  } = context;\r\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\r\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\r\n  // there are different focus semantics. The guards should not be rendered, but\r\n  // aria-hidden should be applied to all nodes still. Further, the visually\r\n  // hidden dismiss button should only appear at the end of the list, not the\r\n  // start.\r\n  const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;\r\n\r\n  // Force the guards to be rendered if the `inert` attribute is not supported.\r\n  const guards = supportsInert() ? _guards : true;\r\n  const orderRef = useLatestRef(order);\r\n  const initialFocusRef = useLatestRef(initialFocus);\r\n  const returnFocusRef = useLatestRef(returnFocus);\r\n  const tree = useFloatingTree();\r\n  const portalContext = usePortalContext();\r\n  const startDismissButtonRef = React.useRef(null);\r\n  const endDismissButtonRef = React.useRef(null);\r\n  const preventReturnFocusRef = React.useRef(false);\r\n  const isPointerDownRef = React.useRef(false);\r\n  const tabbableIndexRef = React.useRef(-1);\r\n  const isInsidePortal = portalContext != null;\r\n  const floatingFocusElement = getFloatingFocusElement(floating);\r\n  const getTabbableContent = useEffectEvent(function (container) {\r\n    if (container === void 0) {\r\n      container = floatingFocusElement;\r\n    }\r\n    return container ? tabbable(container, getTabbableOptions()) : [];\r\n  });\r\n  const getTabbableElements = useEffectEvent(container => {\r\n    const content = getTabbableContent(container);\r\n    return orderRef.current.map(type => {\r\n      if (domReference && type === 'reference') {\r\n        return domReference;\r\n      }\r\n      if (floatingFocusElement && type === 'floating') {\r\n        return floatingFocusElement;\r\n      }\r\n      return content;\r\n    }).filter(Boolean).flat();\r\n  });\r\n  React.useEffect(() => {\r\n    if (disabled) return;\r\n    if (!modal) return;\r\n    function onKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n        // The focus guards have nothing to focus, so we need to stop the event.\r\n        if (contains(floatingFocusElement, activeElement(getDocument(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {\r\n          stopEvent(event);\r\n        }\r\n        const els = getTabbableElements();\r\n        const target = getTarget(event);\r\n        if (orderRef.current[0] === 'reference' && target === domReference) {\r\n          stopEvent(event);\r\n          if (event.shiftKey) {\r\n            enqueueFocus(els[els.length - 1]);\r\n          } else {\r\n            enqueueFocus(els[1]);\r\n          }\r\n        }\r\n        if (orderRef.current[1] === 'floating' && target === floatingFocusElement && event.shiftKey) {\r\n          stopEvent(event);\r\n          enqueueFocus(els[0]);\r\n        }\r\n      }\r\n    }\r\n    const doc = getDocument(floatingFocusElement);\r\n    doc.addEventListener('keydown', onKeyDown);\r\n    return () => {\r\n      doc.removeEventListener('keydown', onKeyDown);\r\n    };\r\n  }, [disabled, domReference, floatingFocusElement, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);\r\n  React.useEffect(() => {\r\n    if (disabled) return;\r\n    if (!floating) return;\r\n    function handleFocusIn(event) {\r\n      const target = getTarget(event);\r\n      const tabbableContent = getTabbableContent();\r\n      const tabbableIndex = tabbableContent.indexOf(target);\r\n      if (tabbableIndex !== -1) {\r\n        tabbableIndexRef.current = tabbableIndex;\r\n      }\r\n    }\r\n    floating.addEventListener('focusin', handleFocusIn);\r\n    return () => {\r\n      floating.removeEventListener('focusin', handleFocusIn);\r\n    };\r\n  }, [disabled, floating, getTabbableContent]);\r\n  React.useEffect(() => {\r\n    if (disabled) return;\r\n    if (!closeOnFocusOut) return;\r\n\r\n    // In Safari, buttons lose focus when pressing them.\r\n    function handlePointerDown() {\r\n      isPointerDownRef.current = true;\r\n      setTimeout(() => {\r\n        isPointerDownRef.current = false;\r\n      });\r\n    }\r\n    function handleFocusOutside(event) {\r\n      const relatedTarget = event.relatedTarget;\r\n      queueMicrotask(() => {\r\n        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\r\n          var _node$context, _node$context2;\r\n          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\r\n        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\r\n          var _node$context3, _node$context4;\r\n          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\r\n        })));\r\n\r\n        // Restore focus to the previous tabbable element index to prevent\r\n        // focus from being lost outside the floating tree.\r\n        if (restoreFocus && movedToUnrelatedNode && activeElement(getDocument(floatingFocusElement)) === getDocument(floatingFocusElement).body) {\r\n          // Let `FloatingPortal` effect knows that focus is still inside the\r\n          // floating tree.\r\n          if (isHTMLElement(floatingFocusElement)) {\r\n            floatingFocusElement.focus();\r\n          }\r\n          const prevTabbableIndex = tabbableIndexRef.current;\r\n          const tabbableContent = getTabbableContent();\r\n          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;\r\n          if (isHTMLElement(nodeToFocus)) {\r\n            nodeToFocus.focus();\r\n          }\r\n        }\r\n\r\n        // Focus did not move inside the floating tree, and there are no tabbable\r\n        // portal guards to handle closing.\r\n        if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\r\n        // Fix React 18 Strict Mode returnFocus due to double rendering.\r\n        relatedTarget !== getPreviouslyFocusedElement()) {\r\n          preventReturnFocusRef.current = true;\r\n          onOpenChange(false, event, 'focus-out');\r\n        }\r\n      });\r\n    }\r\n    if (floating && isHTMLElement(domReference)) {\r\n      domReference.addEventListener('focusout', handleFocusOutside);\r\n      domReference.addEventListener('pointerdown', handlePointerDown);\r\n      floating.addEventListener('focusout', handleFocusOutside);\r\n      return () => {\r\n        domReference.removeEventListener('focusout', handleFocusOutside);\r\n        domReference.removeEventListener('pointerdown', handlePointerDown);\r\n        floating.removeEventListener('focusout', handleFocusOutside);\r\n      };\r\n    }\r\n  }, [disabled, domReference, floating, floatingFocusElement, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent, isUntrappedTypeableCombobox]);\r\n  React.useEffect(() => {\r\n    var _portalContext$portal;\r\n    if (disabled) return;\r\n\r\n    // Don't hide portals nested within the parent portal.\r\n    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll(\"[\" + createAttribute('portal') + \"]\")) || []);\r\n    if (floating) {\r\n      const insideElements = [floating, ...portalNodes, startDismissButtonRef.current, endDismissButtonRef.current, orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null].filter(x => x != null);\r\n      const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);\r\n      return () => {\r\n        cleanup();\r\n      };\r\n    }\r\n  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards]);\r\n  index(() => {\r\n    if (disabled || !isHTMLElement(floatingFocusElement)) return;\r\n    const doc = getDocument(floatingFocusElement);\r\n    const previouslyFocusedElement = activeElement(doc);\r\n\r\n    // Wait for any layout effect state setters to execute to set `tabIndex`.\r\n    queueMicrotask(() => {\r\n      const focusableElements = getTabbableElements(floatingFocusElement);\r\n      const initialFocusValue = initialFocusRef.current;\r\n      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;\r\n      const focusAlreadyInsideFloatingEl = contains(floatingFocusElement, previouslyFocusedElement);\r\n      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\r\n        enqueueFocus(elToFocus, {\r\n          preventScroll: elToFocus === floatingFocusElement\r\n        });\r\n      }\r\n    });\r\n  }, [disabled, open, floatingFocusElement, ignoreInitialFocus, getTabbableElements, initialFocusRef]);\r\n  index(() => {\r\n    if (disabled || !floatingFocusElement) return;\r\n    let preventReturnFocusScroll = false;\r\n    const doc = getDocument(floatingFocusElement);\r\n    const previouslyFocusedElement = activeElement(doc);\r\n    const contextData = dataRef.current;\r\n    let openEvent = contextData.openEvent;\r\n    addPreviouslyFocusedElement(previouslyFocusedElement);\r\n\r\n    // Dismissing via outside press should always ignore `returnFocus` to\r\n    // prevent unwanted scrolling.\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        open,\r\n        reason,\r\n        event,\r\n        nested\r\n      } = _ref;\r\n      if (open) {\r\n        openEvent = event;\r\n      }\r\n      if (reason === 'escape-key' && refs.domReference.current) {\r\n        addPreviouslyFocusedElement(refs.domReference.current);\r\n      }\r\n      if (reason === 'hover' && event.type === 'mouseleave') {\r\n        preventReturnFocusRef.current = true;\r\n      }\r\n      if (reason !== 'outside-press') return;\r\n      if (nested) {\r\n        preventReturnFocusRef.current = false;\r\n        preventReturnFocusScroll = true;\r\n      } else {\r\n        preventReturnFocusRef.current = !(isVirtualClick(event) || isVirtualPointerEvent(event));\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    const fallbackEl = doc.createElement('span');\r\n    fallbackEl.setAttribute('tabindex', '-1');\r\n    fallbackEl.setAttribute('aria-hidden', 'true');\r\n    Object.assign(fallbackEl.style, HIDDEN_STYLES);\r\n    if (isInsidePortal && domReference) {\r\n      domReference.insertAdjacentElement('afterend', fallbackEl);\r\n    }\r\n    function getReturnElement() {\r\n      if (typeof returnFocusRef.current === 'boolean') {\r\n        return getPreviouslyFocusedElement() || fallbackEl;\r\n      }\r\n      return returnFocusRef.current.current || fallbackEl;\r\n    }\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n      const activeEl = activeElement(doc);\r\n      const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\r\n        var _node$context5;\r\n        return contains((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);\r\n      });\r\n      const shouldFocusReference = isFocusInsideFloatingTree || openEvent && ['click', 'mousedown'].includes(openEvent.type);\r\n      if (shouldFocusReference && refs.domReference.current) {\r\n        addPreviouslyFocusedElement(refs.domReference.current);\r\n      }\r\n      const returnElement = getReturnElement();\r\n      queueMicrotask(() => {\r\n        if (\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(returnElement) && (\r\n        // If the focus moved somewhere else after mount, avoid returning focus\r\n        // since it likely entered a different element which should be\r\n        // respected: https://github.com/floating-ui/floating-ui/issues/2607\r\n        returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {\r\n          returnElement.focus({\r\n            preventScroll: preventReturnFocusScroll\r\n          });\r\n        }\r\n        fallbackEl.remove();\r\n      });\r\n    };\r\n  }, [disabled, floating, floatingFocusElement, returnFocusRef, dataRef, refs, events, tree, nodeId, isInsidePortal, domReference]);\r\n  React.useEffect(() => {\r\n    // The `returnFocus` cleanup behavior is inside a microtask; ensure we\r\n    // wait for it to complete before resetting the flag.\r\n    queueMicrotask(() => {\r\n      preventReturnFocusRef.current = false;\r\n    });\r\n  }, [disabled]);\r\n\r\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\r\n  // It will decide whether or not it needs to render its own guards.\r\n  index(() => {\r\n    if (disabled) return;\r\n    if (!portalContext) return;\r\n    portalContext.setFocusManagerState({\r\n      modal,\r\n      closeOnFocusOut,\r\n      open,\r\n      onOpenChange,\r\n      refs\r\n    });\r\n    return () => {\r\n      portalContext.setFocusManagerState(null);\r\n    };\r\n  }, [disabled, portalContext, modal, open, onOpenChange, refs, closeOnFocusOut]);\r\n  index(() => {\r\n    if (disabled) return;\r\n    if (!floatingFocusElement) return;\r\n    if (typeof MutationObserver !== 'function') return;\r\n    if (ignoreInitialFocus) return;\r\n    const handleMutation = () => {\r\n      const tabIndex = floatingFocusElement.getAttribute('tabindex');\r\n      const tabbableContent = getTabbableContent();\r\n      const activeEl = activeElement(getDocument(floating));\r\n      const tabbableIndex = tabbableContent.indexOf(activeEl);\r\n      if (tabbableIndex !== -1) {\r\n        tabbableIndexRef.current = tabbableIndex;\r\n      }\r\n      if (orderRef.current.includes('floating') || activeEl !== refs.domReference.current && tabbableContent.length === 0) {\r\n        if (tabIndex !== '0') {\r\n          floatingFocusElement.setAttribute('tabindex', '0');\r\n        }\r\n      } else if (tabIndex !== '-1') {\r\n        floatingFocusElement.setAttribute('tabindex', '-1');\r\n      }\r\n    };\r\n    handleMutation();\r\n    const observer = new MutationObserver(handleMutation);\r\n    observer.observe(floatingFocusElement, {\r\n      childList: true,\r\n      subtree: true,\r\n      attributes: true\r\n    });\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, [disabled, floating, floatingFocusElement, refs, orderRef, getTabbableContent, ignoreInitialFocus]);\r\n  function renderDismissButton(location) {\r\n    if (disabled || !visuallyHiddenDismiss || !modal) {\r\n      return null;\r\n    }\r\n    return /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {\r\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\r\n      onClick: event => onOpenChange(false, event.nativeEvent)\r\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');\r\n  }\r\n  const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        const els = getTabbableElements();\r\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        preventReturnFocusRef.current = false;\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const nextTabbable = getNextTabbable() || domReference;\r\n          nextTabbable == null || nextTabbable.focus();\r\n        } else {\r\n          var _portalContext$before;\r\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();\r\n        }\r\n      }\r\n    }\r\n  }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\r\n    \"data-type\": \"inside\",\r\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\r\n    onFocus: event => {\r\n      if (modal) {\r\n        enqueueFocus(getTabbableElements()[0]);\r\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\r\n        if (closeOnFocusOut) {\r\n          preventReturnFocusRef.current = true;\r\n        }\r\n        if (isOutsideEvent(event, portalContext.portalNode)) {\r\n          const prevTabbable = getPreviousTabbable() || domReference;\r\n          prevTabbable == null || prevTabbable.focus();\r\n        } else {\r\n          var _portalContext$afterO;\r\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();\r\n        }\r\n      }\r\n    }\r\n  }));\r\n}\r\n\r\nlet lockCount = 0;\r\nfunction enableScrollLock() {\r\n  const isIOS = /iP(hone|ad|od)|iOS/.test(getPlatform());\r\n  const bodyStyle = document.body.style;\r\n  // RTL <body> scrollbar\r\n  const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\r\n  const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\r\n  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\r\n  const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;\r\n  const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;\r\n  bodyStyle.overflow = 'hidden';\r\n  if (scrollbarWidth) {\r\n    bodyStyle[paddingProp] = scrollbarWidth + \"px\";\r\n  }\r\n\r\n  // Only iOS doesn't respect `overflow: hidden` on document.body, and this\r\n  // technique has fewer side effects.\r\n  if (isIOS) {\r\n    var _window$visualViewpor, _window$visualViewpor2;\r\n    // iOS 12 does not support `visualViewport`.\r\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\r\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\r\n    Object.assign(bodyStyle, {\r\n      position: 'fixed',\r\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\r\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\r\n      right: '0'\r\n    });\r\n  }\r\n  return () => {\r\n    Object.assign(bodyStyle, {\r\n      overflow: '',\r\n      [paddingProp]: ''\r\n    });\r\n    if (isIOS) {\r\n      Object.assign(bodyStyle, {\r\n        position: '',\r\n        top: '',\r\n        left: '',\r\n        right: ''\r\n      });\r\n      window.scrollTo(scrollX, scrollY);\r\n    }\r\n  };\r\n}\r\nlet cleanup = () => {};\r\n\r\n/**\r\n * Provides base styling for a fixed overlay element to dim content or block\r\n * pointer events behind a floating element.\r\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\r\n * @see https://floating-ui.com/docs/FloatingOverlay\r\n */\r\nconst FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(props, ref) {\r\n  const {\r\n    lockScroll = false,\r\n    ...rest\r\n  } = props;\r\n  index(() => {\r\n    if (!lockScroll) return;\r\n    lockCount++;\r\n    if (lockCount === 1) {\r\n      cleanup = enableScrollLock();\r\n    }\r\n    return () => {\r\n      lockCount--;\r\n      if (lockCount === 0) {\r\n        cleanup();\r\n      }\r\n    };\r\n  }, [lockScroll]);\r\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\r\n    ref: ref\r\n  }, rest, {\r\n    style: {\r\n      position: 'fixed',\r\n      overflow: 'auto',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      ...rest.style\r\n    }\r\n  }));\r\n});\r\n\r\nfunction isButtonTarget(event) {\r\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\r\n}\r\nfunction isSpaceIgnored(element) {\r\n  return isTypeableElement(element);\r\n}\r\n/**\r\n * Opens or closes the floating element when clicking the reference element.\r\n * @see https://floating-ui.com/docs/useClick\r\n */\r\nfunction useClick(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    dataRef,\r\n    elements: {\r\n      domReference\r\n    }\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    event: eventOption = 'click',\r\n    toggle = true,\r\n    ignoreMouse = false,\r\n    keyboardHandlers = true,\r\n    stickIfOpen = true\r\n  } = props;\r\n  const pointerTypeRef = React.useRef();\r\n  const didKeyDownRef = React.useRef(false);\r\n  const reference = React.useMemo(() => ({\r\n    onPointerDown(event) {\r\n      pointerTypeRef.current = event.pointerType;\r\n    },\r\n    onMouseDown(event) {\r\n      const pointerType = pointerTypeRef.current;\r\n\r\n      // Ignore all buttons except for the \"main\" button.\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n      if (event.button !== 0) return;\r\n      if (eventOption === 'click') return;\r\n      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;\r\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'mousedown' : true)) {\r\n        onOpenChange(false, event.nativeEvent, 'click');\r\n      } else {\r\n        // Prevent stealing focus from the floating element\r\n        event.preventDefault();\r\n        onOpenChange(true, event.nativeEvent, 'click');\r\n      }\r\n    },\r\n    onClick(event) {\r\n      const pointerType = pointerTypeRef.current;\r\n      if (eventOption === 'mousedown' && pointerTypeRef.current) {\r\n        pointerTypeRef.current = undefined;\r\n        return;\r\n      }\r\n      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;\r\n      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === 'click' : true)) {\r\n        onOpenChange(false, event.nativeEvent, 'click');\r\n      } else {\r\n        onOpenChange(true, event.nativeEvent, 'click');\r\n      }\r\n    },\r\n    onKeyDown(event) {\r\n      pointerTypeRef.current = undefined;\r\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\r\n        return;\r\n      }\r\n      if (event.key === ' ' && !isSpaceIgnored(domReference)) {\r\n        // Prevent scrolling\r\n        event.preventDefault();\r\n        didKeyDownRef.current = true;\r\n      }\r\n      if (event.key === 'Enter') {\r\n        if (open && toggle) {\r\n          onOpenChange(false, event.nativeEvent, 'click');\r\n        } else {\r\n          onOpenChange(true, event.nativeEvent, 'click');\r\n        }\r\n      }\r\n    },\r\n    onKeyUp(event) {\r\n      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\r\n        return;\r\n      }\r\n      if (event.key === ' ' && didKeyDownRef.current) {\r\n        didKeyDownRef.current = false;\r\n        if (open && toggle) {\r\n          onOpenChange(false, event.nativeEvent, 'click');\r\n        } else {\r\n          onOpenChange(true, event.nativeEvent, 'click');\r\n        }\r\n      }\r\n    }\r\n  }), [dataRef, domReference, eventOption, ignoreMouse, keyboardHandlers, onOpenChange, open, stickIfOpen, toggle]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference\r\n  } : {}, [enabled, reference]);\r\n}\r\n\r\nfunction createVirtualElement(domElement, data) {\r\n  let offsetX = null;\r\n  let offsetY = null;\r\n  let isAutoUpdateEvent = false;\r\n  return {\r\n    contextElement: domElement || undefined,\r\n    getBoundingClientRect() {\r\n      var _data$dataRef$current;\r\n      const domRect = (domElement == null ? void 0 : domElement.getBoundingClientRect()) || {\r\n        width: 0,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n      const isXAxis = data.axis === 'x' || data.axis === 'both';\r\n      const isYAxis = data.axis === 'y' || data.axis === 'both';\r\n      const canTrackCursorOnAutoUpdate = ['mouseenter', 'mousemove'].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';\r\n      let width = domRect.width;\r\n      let height = domRect.height;\r\n      let x = domRect.x;\r\n      let y = domRect.y;\r\n      if (offsetX == null && data.x && isXAxis) {\r\n        offsetX = domRect.x - data.x;\r\n      }\r\n      if (offsetY == null && data.y && isYAxis) {\r\n        offsetY = domRect.y - data.y;\r\n      }\r\n      x -= offsetX || 0;\r\n      y -= offsetY || 0;\r\n      width = 0;\r\n      height = 0;\r\n      if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\r\n        width = data.axis === 'y' ? domRect.width : 0;\r\n        height = data.axis === 'x' ? domRect.height : 0;\r\n        x = isXAxis && data.x != null ? data.x : x;\r\n        y = isYAxis && data.y != null ? data.y : y;\r\n      } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\r\n        height = data.axis === 'x' ? domRect.height : height;\r\n        width = data.axis === 'y' ? domRect.width : width;\r\n      }\r\n      isAutoUpdateEvent = true;\r\n      return {\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: y + height,\r\n        left: x\r\n      };\r\n    }\r\n  };\r\n}\r\nfunction isMouseBasedEvent(event) {\r\n  return event != null && event.clientX != null;\r\n}\r\n/**\r\n * Positions the floating element relative to a client point (in the viewport),\r\n * such as the mouse position. By default, it follows the mouse cursor.\r\n * @see https://floating-ui.com/docs/useClientPoint\r\n */\r\nfunction useClientPoint(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    dataRef,\r\n    elements: {\r\n      floating,\r\n      domReference\r\n    },\r\n    refs\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    axis = 'both',\r\n    x = null,\r\n    y = null\r\n  } = props;\r\n  const initialRef = React.useRef(false);\r\n  const cleanupListenerRef = React.useRef(null);\r\n  const [pointerType, setPointerType] = React.useState();\r\n  const [reactive, setReactive] = React.useState([]);\r\n  const setReference = useEffectEvent((x, y) => {\r\n    if (initialRef.current) return;\r\n\r\n    // Prevent setting if the open event was not a mouse-like one\r\n    // (e.g. focus to open, then hover over the reference element).\r\n    // Only apply if the event exists.\r\n    if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\r\n      return;\r\n    }\r\n    refs.setPositionReference(createVirtualElement(domReference, {\r\n      x,\r\n      y,\r\n      axis,\r\n      dataRef,\r\n      pointerType\r\n    }));\r\n  });\r\n  const handleReferenceEnterOrMove = useEffectEvent(event => {\r\n    if (x != null || y != null) return;\r\n    if (!open) {\r\n      setReference(event.clientX, event.clientY);\r\n    } else if (!cleanupListenerRef.current) {\r\n      // If there's no cleanup, there's no listener, but we want to ensure\r\n      // we add the listener if the cursor landed on the floating element and\r\n      // then back on the reference (i.e. it's interactive).\r\n      setReactive([]);\r\n    }\r\n  });\r\n\r\n  // If the pointer is a mouse-like pointer, we want to continue following the\r\n  // mouse even if the floating element is transitioning out. On touch\r\n  // devices, this is undesirable because the floating element will move to\r\n  // the dismissal touch point.\r\n  const openCheck = isMouseLikePointerType(pointerType) ? floating : open;\r\n  const addListener = React.useCallback(() => {\r\n    // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\r\n    if (!openCheck || !enabled || x != null || y != null) return;\r\n    const win = getWindow(floating);\r\n    function handleMouseMove(event) {\r\n      const target = getTarget(event);\r\n      if (!contains(floating, target)) {\r\n        setReference(event.clientX, event.clientY);\r\n      } else {\r\n        win.removeEventListener('mousemove', handleMouseMove);\r\n        cleanupListenerRef.current = null;\r\n      }\r\n    }\r\n    if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\r\n      win.addEventListener('mousemove', handleMouseMove);\r\n      const cleanup = () => {\r\n        win.removeEventListener('mousemove', handleMouseMove);\r\n        cleanupListenerRef.current = null;\r\n      };\r\n      cleanupListenerRef.current = cleanup;\r\n      return cleanup;\r\n    }\r\n    refs.setPositionReference(domReference);\r\n  }, [openCheck, enabled, x, y, floating, dataRef, refs, domReference, setReference]);\r\n  React.useEffect(() => {\r\n    return addListener();\r\n  }, [addListener, reactive]);\r\n  React.useEffect(() => {\r\n    if (enabled && !floating) {\r\n      initialRef.current = false;\r\n    }\r\n  }, [enabled, floating]);\r\n  React.useEffect(() => {\r\n    if (!enabled && open) {\r\n      initialRef.current = true;\r\n    }\r\n  }, [enabled, open]);\r\n  index(() => {\r\n    if (enabled && (x != null || y != null)) {\r\n      initialRef.current = false;\r\n      setReference(x, y);\r\n    }\r\n  }, [enabled, x, y, setReference]);\r\n  const reference = React.useMemo(() => {\r\n    function setPointerTypeRef(_ref) {\r\n      let {\r\n        pointerType\r\n      } = _ref;\r\n      setPointerType(pointerType);\r\n    }\r\n    return {\r\n      onPointerDown: setPointerTypeRef,\r\n      onPointerEnter: setPointerTypeRef,\r\n      onMouseMove: handleReferenceEnterOrMove,\r\n      onMouseEnter: handleReferenceEnterOrMove\r\n    };\r\n  }, [handleReferenceEnterOrMove]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference\r\n  } : {}, [enabled, reference]);\r\n}\r\n\r\nconst bubbleHandlerKeys = {\r\n  pointerdown: 'onPointerDown',\r\n  mousedown: 'onMouseDown',\r\n  click: 'onClick'\r\n};\r\nconst captureHandlerKeys = {\r\n  pointerdown: 'onPointerDownCapture',\r\n  mousedown: 'onMouseDownCapture',\r\n  click: 'onClickCapture'\r\n};\r\nconst normalizeProp = normalizable => {\r\n  var _normalizable$escapeK, _normalizable$outside;\r\n  return {\r\n    escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,\r\n    outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true\r\n  };\r\n};\r\n/**\r\n * Closes the floating element when a dismissal is requested — by default, when\r\n * the user presses the `escape` key or outside of the floating element.\r\n * @see https://floating-ui.com/docs/useDismiss\r\n */\r\nfunction useDismiss(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    elements,\r\n    dataRef\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    escapeKey = true,\r\n    outsidePress: unstable_outsidePress = true,\r\n    outsidePressEvent = 'pointerdown',\r\n    referencePress = false,\r\n    referencePressEvent = 'pointerdown',\r\n    ancestorScroll = false,\r\n    bubbles,\r\n    capture\r\n  } = props;\r\n  const tree = useFloatingTree();\r\n  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\r\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\r\n  const insideReactTreeRef = React.useRef(false);\r\n  const endedOrStartedInsideRef = React.useRef(false);\r\n  const {\r\n    escapeKey: escapeKeyBubbles,\r\n    outsidePress: outsidePressBubbles\r\n  } = normalizeProp(bubbles);\r\n  const {\r\n    escapeKey: escapeKeyCapture,\r\n    outsidePress: outsidePressCapture\r\n  } = normalizeProp(capture);\r\n  const isComposingRef = React.useRef(false);\r\n  const closeOnEscapeKeyDown = useEffectEvent(event => {\r\n    var _dataRef$current$floa;\r\n    if (!open || !enabled || !escapeKey || event.key !== 'Escape') {\r\n      return;\r\n    }\r\n\r\n    // Wait until IME is settled. Pressing `Escape` while composing should\r\n    // close the compose menu, but not the floating element.\r\n    if (isComposingRef.current) {\r\n      return;\r\n    }\r\n    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;\r\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n    if (!escapeKeyBubbles) {\r\n      event.stopPropagation();\r\n      if (children.length > 0) {\r\n        let shouldDismiss = true;\r\n        children.forEach(child => {\r\n          var _child$context;\r\n          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\r\n            shouldDismiss = false;\r\n            return;\r\n          }\r\n        });\r\n        if (!shouldDismiss) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, 'escape-key');\r\n  });\r\n  const closeOnEscapeKeyDownCapture = useEffectEvent(event => {\r\n    var _getTarget2;\r\n    const callback = () => {\r\n      var _getTarget;\r\n      closeOnEscapeKeyDown(event);\r\n      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener('keydown', callback);\r\n    };\r\n    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener('keydown', callback);\r\n  });\r\n  const closeOnPressOutside = useEffectEvent(event => {\r\n    var _dataRef$current$floa2;\r\n    // Given developers can stop the propagation of the synthetic event,\r\n    // we can only be confident with a positive value.\r\n    const insideReactTree = insideReactTreeRef.current;\r\n    insideReactTreeRef.current = false;\r\n\r\n    // When click outside is lazy (`click` event), handle dragging.\r\n    // Don't close if:\r\n    // - The click started inside the floating element.\r\n    // - The click ended inside the floating element.\r\n    const endedOrStartedInside = endedOrStartedInsideRef.current;\r\n    endedOrStartedInsideRef.current = false;\r\n    if (outsidePressEvent === 'click' && endedOrStartedInside) {\r\n      return;\r\n    }\r\n    if (insideReactTree) {\r\n      return;\r\n    }\r\n    if (typeof outsidePress === 'function' && !outsidePress(event)) {\r\n      return;\r\n    }\r\n    const target = getTarget(event);\r\n    const inertSelector = \"[\" + createAttribute('inert') + \"]\";\r\n    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);\r\n    let targetRootAncestor = isElement(target) ? target : null;\r\n    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {\r\n      const nextParent = getParentNode(targetRootAncestor);\r\n      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {\r\n        break;\r\n      }\r\n      targetRootAncestor = nextParent;\r\n    }\r\n\r\n    // Check if the click occurred on a third-party element injected after the\r\n    // floating element rendered.\r\n    if (markers.length && isElement(target) && !isRootElement(target) &&\r\n    // Clicked on a direct ancestor (e.g. FloatingOverlay).\r\n    !contains(target, elements.floating) &&\r\n    // If the target root element contains none of the markers, then the\r\n    // element was injected after the floating element rendered.\r\n    Array.from(markers).every(marker => !contains(targetRootAncestor, marker))) {\r\n      return;\r\n    }\r\n\r\n    // Check if the click occurred on the scrollbar\r\n    if (isHTMLElement(target) && floating) {\r\n      // In Firefox, `target.scrollWidth > target.clientWidth` for inline\r\n      // elements.\r\n      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\r\n      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\r\n      let xCond = canScrollY && event.offsetX > target.clientWidth;\r\n\r\n      // In some browsers it is possible to change the <body> (or window)\r\n      // scrollbar to the left side, but is very rare and is difficult to\r\n      // check for. Plus, for modal dialogs with backdrops, it is more\r\n      // important that the backdrop is checked but not so much the window.\r\n      if (canScrollY) {\r\n        const isRTL = getComputedStyle(target).direction === 'rtl';\r\n        if (isRTL) {\r\n          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\r\n        }\r\n      }\r\n      if (xCond || canScrollX && event.offsetY > target.clientHeight) {\r\n        return;\r\n      }\r\n    }\r\n    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;\r\n    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\r\n      var _node$context;\r\n      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\r\n    });\r\n    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {\r\n      return;\r\n    }\r\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\r\n    if (children.length > 0) {\r\n      let shouldDismiss = true;\r\n      children.forEach(child => {\r\n        var _child$context2;\r\n        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\r\n          shouldDismiss = false;\r\n          return;\r\n        }\r\n      });\r\n      if (!shouldDismiss) {\r\n        return;\r\n      }\r\n    }\r\n    onOpenChange(false, event, 'outside-press');\r\n  });\r\n  const closeOnPressOutsideCapture = useEffectEvent(event => {\r\n    var _getTarget4;\r\n    const callback = () => {\r\n      var _getTarget3;\r\n      closeOnPressOutside(event);\r\n      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);\r\n    };\r\n    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);\r\n  });\r\n  React.useEffect(() => {\r\n    if (!open || !enabled) {\r\n      return;\r\n    }\r\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\r\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\r\n    let compositionTimeout = -1;\r\n    function onScroll(event) {\r\n      onOpenChange(false, event, 'ancestor-scroll');\r\n    }\r\n    function handleCompositionStart() {\r\n      window.clearTimeout(compositionTimeout);\r\n      isComposingRef.current = true;\r\n    }\r\n    function handleCompositionEnd() {\r\n      // Safari fires `compositionend` before `keydown`, so we need to wait\r\n      // until the next tick to set `isComposing` to `false`.\r\n      // https://bugs.webkit.org/show_bug.cgi?id=165004\r\n      compositionTimeout = window.setTimeout(() => {\r\n        isComposingRef.current = false;\r\n      },\r\n      // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.\r\n      // Only apply to WebKit for the test to remain 0ms.\r\n      isWebKit() ? 5 : 0);\r\n    }\r\n    const doc = getDocument(elements.floating);\r\n    if (escapeKey) {\r\n      doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\r\n      doc.addEventListener('compositionstart', handleCompositionStart);\r\n      doc.addEventListener('compositionend', handleCompositionEnd);\r\n    }\r\n    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\r\n    let ancestors = [];\r\n    if (ancestorScroll) {\r\n      if (isElement(elements.domReference)) {\r\n        ancestors = getOverflowAncestors(elements.domReference);\r\n      }\r\n      if (isElement(elements.floating)) {\r\n        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));\r\n      }\r\n      if (!isElement(elements.reference) && elements.reference && elements.reference.contextElement) {\r\n        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));\r\n      }\r\n    }\r\n\r\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\r\n    ancestors = ancestors.filter(ancestor => {\r\n      var _doc$defaultView;\r\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\r\n    });\r\n    ancestors.forEach(ancestor => {\r\n      ancestor.addEventListener('scroll', onScroll, {\r\n        passive: true\r\n      });\r\n    });\r\n    return () => {\r\n      if (escapeKey) {\r\n        doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);\r\n        doc.removeEventListener('compositionstart', handleCompositionStart);\r\n        doc.removeEventListener('compositionend', handleCompositionEnd);\r\n      }\r\n      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);\r\n      ancestors.forEach(ancestor => {\r\n        ancestor.removeEventListener('scroll', onScroll);\r\n      });\r\n      window.clearTimeout(compositionTimeout);\r\n    };\r\n  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);\r\n  React.useEffect(() => {\r\n    insideReactTreeRef.current = false;\r\n  }, [outsidePress, outsidePressEvent]);\r\n  const reference = React.useMemo(() => ({\r\n    onKeyDown: closeOnEscapeKeyDown,\r\n    [bubbleHandlerKeys[referencePressEvent]]: event => {\r\n      if (referencePress) {\r\n        onOpenChange(false, event.nativeEvent, 'reference-press');\r\n      }\r\n    }\r\n  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);\r\n  const floating = React.useMemo(() => ({\r\n    onKeyDown: closeOnEscapeKeyDown,\r\n    onMouseDown() {\r\n      endedOrStartedInsideRef.current = true;\r\n    },\r\n    onMouseUp() {\r\n      endedOrStartedInsideRef.current = true;\r\n    },\r\n    [captureHandlerKeys[outsidePressEvent]]: () => {\r\n      insideReactTreeRef.current = true;\r\n    }\r\n  }), [closeOnEscapeKeyDown, outsidePressEvent]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference,\r\n    floating\r\n  } : {}, [enabled, reference, floating]);\r\n}\r\n\r\nfunction useFloatingRootContext(options) {\r\n  const {\r\n    open = false,\r\n    onOpenChange: onOpenChangeProp,\r\n    elements: elementsProp\r\n  } = options;\r\n  const floatingId = useId();\r\n  const dataRef = React.useRef({});\r\n  const [events] = React.useState(() => createPubSub());\r\n  const nested = useFloatingParentNodeId() != null;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    const optionDomReference = elementsProp.reference;\r\n    if (optionDomReference && !isElement(optionDomReference)) {\r\n      error('Cannot pass a virtual element to the `elements.reference` option,', 'as it must be a real DOM element. Use `refs.setPositionReference()`', 'instead.');\r\n    }\r\n  }\r\n  const [positionReference, setPositionReference] = React.useState(elementsProp.reference);\r\n  const onOpenChange = useEffectEvent((open, event, reason) => {\r\n    dataRef.current.openEvent = open ? event : undefined;\r\n    events.emit('openchange', {\r\n      open,\r\n      event,\r\n      reason,\r\n      nested\r\n    });\r\n    onOpenChangeProp == null || onOpenChangeProp(open, event, reason);\r\n  });\r\n  const refs = React.useMemo(() => ({\r\n    setPositionReference\r\n  }), []);\r\n  const elements = React.useMemo(() => ({\r\n    reference: positionReference || elementsProp.reference || null,\r\n    floating: elementsProp.floating || null,\r\n    domReference: elementsProp.reference\r\n  }), [positionReference, elementsProp.reference, elementsProp.floating]);\r\n  return React.useMemo(() => ({\r\n    dataRef,\r\n    open,\r\n    onOpenChange,\r\n    elements,\r\n    events,\r\n    floatingId,\r\n    refs\r\n  }), [open, onOpenChange, elements, events, floatingId, refs]);\r\n}\r\n\r\n/**\r\n * Provides data to position a floating element and context to add interactions.\r\n * @see https://floating-ui.com/docs/useFloating\r\n */\r\nfunction useFloating(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    nodeId\r\n  } = options;\r\n  const internalRootContext = useFloatingRootContext({\r\n    ...options,\r\n    elements: {\r\n      reference: null,\r\n      floating: null,\r\n      ...options.elements\r\n    }\r\n  });\r\n  const rootContext = options.rootContext || internalRootContext;\r\n  const computedElements = rootContext.elements;\r\n  const [_domReference, setDomReference] = React.useState(null);\r\n  const [positionReference, _setPositionReference] = React.useState(null);\r\n  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;\r\n  const domReference = optionDomReference || _domReference;\r\n  const domReferenceRef = React.useRef(null);\r\n  const tree = useFloatingTree();\r\n  index(() => {\r\n    if (domReference) {\r\n      domReferenceRef.current = domReference;\r\n    }\r\n  }, [domReference]);\r\n  const position = useFloating$1({\r\n    ...options,\r\n    elements: {\r\n      ...computedElements,\r\n      ...(positionReference && {\r\n        reference: positionReference\r\n      })\r\n    }\r\n  });\r\n  const setPositionReference = React.useCallback(node => {\r\n    const computedPositionReference = isElement(node) ? {\r\n      getBoundingClientRect: () => node.getBoundingClientRect(),\r\n      contextElement: node\r\n    } : node;\r\n    // Store the positionReference in state if the DOM reference is specified externally via the\r\n    // `elements.reference` option. This ensures that it won't be overridden on future renders.\r\n    _setPositionReference(computedPositionReference);\r\n    position.refs.setReference(computedPositionReference);\r\n  }, [position.refs]);\r\n  const setReference = React.useCallback(node => {\r\n    if (isElement(node) || node === null) {\r\n      domReferenceRef.current = node;\r\n      setDomReference(node);\r\n    }\r\n\r\n    // Backwards-compatibility for passing a virtual element to `reference`\r\n    // after it has set the DOM reference.\r\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\r\n    // Don't allow setting virtual elements using the old technique back to\r\n    // `null` to support `positionReference` + an unstable `reference`\r\n    // callback ref.\r\n    node !== null && !isElement(node)) {\r\n      position.refs.setReference(node);\r\n    }\r\n  }, [position.refs]);\r\n  const refs = React.useMemo(() => ({\r\n    ...position.refs,\r\n    setReference,\r\n    setPositionReference,\r\n    domReference: domReferenceRef\r\n  }), [position.refs, setReference, setPositionReference]);\r\n  const elements = React.useMemo(() => ({\r\n    ...position.elements,\r\n    domReference: domReference\r\n  }), [position.elements, domReference]);\r\n  const context = React.useMemo(() => ({\r\n    ...position,\r\n    ...rootContext,\r\n    refs,\r\n    elements,\r\n    nodeId\r\n  }), [position, refs, elements, nodeId, rootContext]);\r\n  index(() => {\r\n    rootContext.dataRef.current.floatingContext = context;\r\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\r\n    if (node) {\r\n      node.context = context;\r\n    }\r\n  });\r\n  return React.useMemo(() => ({\r\n    ...position,\r\n    context,\r\n    refs,\r\n    elements\r\n  }), [position, refs, elements, context]);\r\n}\r\n\r\n/**\r\n * Opens the floating element while the reference element has focus, like CSS\r\n * `:focus`.\r\n * @see https://floating-ui.com/docs/useFocus\r\n */\r\nfunction useFocus(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    events,\r\n    dataRef,\r\n    elements\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    visibleOnly = true\r\n  } = props;\r\n  const blockFocusRef = React.useRef(false);\r\n  const timeoutRef = React.useRef();\r\n  const keyboardModalityRef = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    const win = getWindow(elements.domReference);\r\n\r\n    // If the reference was focused and the user left the tab/window, and the\r\n    // floating element was not open, the focus should be blocked when they\r\n    // return to the tab/window.\r\n    function onBlur() {\r\n      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement(getDocument(elements.domReference))) {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    function onKeyDown() {\r\n      keyboardModalityRef.current = true;\r\n    }\r\n    win.addEventListener('blur', onBlur);\r\n    win.addEventListener('keydown', onKeyDown, true);\r\n    return () => {\r\n      win.removeEventListener('blur', onBlur);\r\n      win.removeEventListener('keydown', onKeyDown, true);\r\n    };\r\n  }, [elements.domReference, open, enabled]);\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    function onOpenChange(_ref) {\r\n      let {\r\n        reason\r\n      } = _ref;\r\n      if (reason === 'reference-press' || reason === 'escape-key') {\r\n        blockFocusRef.current = true;\r\n      }\r\n    }\r\n    events.on('openchange', onOpenChange);\r\n    return () => {\r\n      events.off('openchange', onOpenChange);\r\n    };\r\n  }, [events, enabled]);\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeoutRef.current);\r\n    };\r\n  }, []);\r\n  const reference = React.useMemo(() => ({\r\n    onPointerDown(event) {\r\n      if (isVirtualPointerEvent(event.nativeEvent)) return;\r\n      keyboardModalityRef.current = false;\r\n    },\r\n    onMouseLeave() {\r\n      blockFocusRef.current = false;\r\n    },\r\n    onFocus(event) {\r\n      if (blockFocusRef.current) return;\r\n      const target = getTarget(event.nativeEvent);\r\n      if (visibleOnly && isElement(target)) {\r\n        try {\r\n          // Mac Safari unreliably matches `:focus-visible` on the reference\r\n          // if focus was outside the page initially - use the fallback\r\n          // instead.\r\n          if (isSafari() && isMac()) throw Error();\r\n          if (!target.matches(':focus-visible')) return;\r\n        } catch (e) {\r\n          // Old browsers will throw an error when using `:focus-visible`.\r\n          if (!keyboardModalityRef.current && !isTypeableElement(target)) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      onOpenChange(true, event.nativeEvent, 'focus');\r\n    },\r\n    onBlur(event) {\r\n      blockFocusRef.current = false;\r\n      const relatedTarget = event.relatedTarget;\r\n      const nativeEvent = event.nativeEvent;\r\n\r\n      // Hit the non-modal focus management portal guard. Focus will be\r\n      // moved into the floating element immediately after.\r\n      const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';\r\n\r\n      // Wait for the window blur listener to fire.\r\n      timeoutRef.current = window.setTimeout(() => {\r\n        var _dataRef$current$floa;\r\n        const activeEl = activeElement(elements.domReference ? elements.domReference.ownerDocument : document);\r\n\r\n        // Focus left the page, keep it open.\r\n        if (!relatedTarget && activeEl === elements.domReference) return;\r\n\r\n        // When focusing the reference element (e.g. regular click), then\r\n        // clicking into the floating element, prevent it from hiding.\r\n        // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\r\n        // We can not rely on relatedTarget to point to the correct element\r\n        // as it will only point to the shadow host of the newly focused element\r\n        // and not the element that actually has received focus if it is located\r\n        // inside a shadow root.\r\n        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {\r\n          return;\r\n        }\r\n        onOpenChange(false, nativeEvent, 'focus');\r\n      });\r\n    }\r\n  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference\r\n  } : {}, [enabled, reference]);\r\n}\r\n\r\nconst ACTIVE_KEY = 'active';\r\nconst SELECTED_KEY = 'selected';\r\nfunction mergeProps(userProps, propsList, elementKey) {\r\n  const map = new Map();\r\n  const isItem = elementKey === 'item';\r\n  let domUserProps = userProps;\r\n  if (isItem && userProps) {\r\n    const {\r\n      [ACTIVE_KEY]: _,\r\n      [SELECTED_KEY]: __,\r\n      ...validProps\r\n    } = userProps;\r\n    domUserProps = validProps;\r\n  }\r\n  return {\r\n    ...(elementKey === 'floating' && {\r\n      tabIndex: -1,\r\n      [FOCUSABLE_ATTRIBUTE]: ''\r\n    }),\r\n    ...domUserProps,\r\n    ...propsList.map(value => {\r\n      const propsOrGetProps = value ? value[elementKey] : null;\r\n      if (typeof propsOrGetProps === 'function') {\r\n        return userProps ? propsOrGetProps(userProps) : null;\r\n      }\r\n      return propsOrGetProps;\r\n    }).concat(userProps).reduce((acc, props) => {\r\n      if (!props) {\r\n        return acc;\r\n      }\r\n      Object.entries(props).forEach(_ref => {\r\n        let [key, value] = _ref;\r\n        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {\r\n          return;\r\n        }\r\n        if (key.indexOf('on') === 0) {\r\n          if (!map.has(key)) {\r\n            map.set(key, []);\r\n          }\r\n          if (typeof value === 'function') {\r\n            var _map$get;\r\n            (_map$get = map.get(key)) == null || _map$get.push(value);\r\n            acc[key] = function () {\r\n              var _map$get2;\r\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                args[_key] = arguments[_key];\r\n              }\r\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);\r\n            };\r\n          }\r\n        } else {\r\n          acc[key] = value;\r\n        }\r\n      });\r\n      return acc;\r\n    }, {})\r\n  };\r\n}\r\n/**\r\n * Merges an array of interaction hooks' props into prop getters, allowing\r\n * event handler functions to be composed together without overwriting one\r\n * another.\r\n * @see https://floating-ui.com/docs/useInteractions\r\n */\r\nfunction useInteractions(propsList) {\r\n  if (propsList === void 0) {\r\n    propsList = [];\r\n  }\r\n  const referenceDeps = propsList.map(key => key == null ? void 0 : key.reference);\r\n  const floatingDeps = propsList.map(key => key == null ? void 0 : key.floating);\r\n  const itemDeps = propsList.map(key => key == null ? void 0 : key.item);\r\n  const getReferenceProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  referenceDeps);\r\n  const getFloatingProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  floatingDeps);\r\n  const getItemProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  itemDeps);\r\n  return React.useMemo(() => ({\r\n    getReferenceProps,\r\n    getFloatingProps,\r\n    getItemProps\r\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\r\n}\r\n\r\nlet isPreventScrollSupported = false;\r\nfunction doSwitch(orientation, vertical, horizontal) {\r\n  switch (orientation) {\r\n    case 'vertical':\r\n      return vertical;\r\n    case 'horizontal':\r\n      return horizontal;\r\n    default:\r\n      return vertical || horizontal;\r\n  }\r\n}\r\nfunction isMainOrientationKey(key, orientation) {\r\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\r\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\r\n  const vertical = key === ARROW_DOWN;\r\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key === ' ' || key === '';\r\n}\r\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\r\n  const horizontal = key === ARROW_DOWN;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\r\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\r\n  const horizontal = key === ARROW_UP;\r\n  return doSwitch(orientation, vertical, horizontal);\r\n}\r\n/**\r\n * Adds arrow key-based navigation of a list of items, either using real DOM\r\n * focus or virtual focus.\r\n * @see https://floating-ui.com/docs/useListNavigation\r\n */\r\nfunction useListNavigation(context, props) {\r\n  const {\r\n    open,\r\n    onOpenChange,\r\n    elements\r\n  } = context;\r\n  const {\r\n    listRef,\r\n    activeIndex,\r\n    onNavigate: unstable_onNavigate = () => {},\r\n    enabled = true,\r\n    selectedIndex = null,\r\n    allowEscape = false,\r\n    loop = false,\r\n    nested = false,\r\n    rtl = false,\r\n    virtual = false,\r\n    focusItemOnOpen = 'auto',\r\n    focusItemOnHover = true,\r\n    openOnArrowKeyDown = true,\r\n    disabledIndices = undefined,\r\n    orientation = 'vertical',\r\n    cols = 1,\r\n    scrollItemIntoView = true,\r\n    virtualItemRef,\r\n    itemSizes,\r\n    dense = false\r\n  } = props;\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    if (allowEscape) {\r\n      if (!loop) {\r\n        warn('`useListNavigation` looping must be enabled to allow escaping.');\r\n      }\r\n      if (!virtual) {\r\n        warn('`useListNavigation` must be virtual to allow escaping.');\r\n      }\r\n    }\r\n    if (orientation === 'vertical' && cols > 1) {\r\n      warn('In grid list navigation mode (`cols` > 1), the `orientation` should', 'be either \"horizontal\" or \"both\".');\r\n    }\r\n  }\r\n  const floatingFocusElement = getFloatingFocusElement(elements.floating);\r\n  const floatingFocusElementRef = useLatestRef(floatingFocusElement);\r\n  const parentId = useFloatingParentNodeId();\r\n  const tree = useFloatingTree();\r\n  const onNavigate = useEffectEvent(unstable_onNavigate);\r\n  const typeableComboboxReference = isTypeableCombobox(elements.domReference);\r\n  const focusItemOnOpenRef = React.useRef(focusItemOnOpen);\r\n  const indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\r\n  const keyRef = React.useRef(null);\r\n  const isPointerModalityRef = React.useRef(true);\r\n  const previousOnNavigateRef = React.useRef(onNavigate);\r\n  const previousMountedRef = React.useRef(!!elements.floating);\r\n  const previousOpenRef = React.useRef(open);\r\n  const forceSyncFocus = React.useRef(false);\r\n  const forceScrollIntoViewRef = React.useRef(false);\r\n  const disabledIndicesRef = useLatestRef(disabledIndices);\r\n  const latestOpenRef = useLatestRef(open);\r\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\r\n  const selectedIndexRef = useLatestRef(selectedIndex);\r\n  const [activeId, setActiveId] = React.useState();\r\n  const [virtualId, setVirtualId] = React.useState();\r\n  const focusItem = useEffectEvent(function (listRef, indexRef, forceScrollIntoView) {\r\n    if (forceScrollIntoView === void 0) {\r\n      forceScrollIntoView = false;\r\n    }\r\n    function runFocus(item) {\r\n      if (virtual) {\r\n        setActiveId(item.id);\r\n        tree == null || tree.events.emit('virtualfocus', item);\r\n        if (virtualItemRef) {\r\n          virtualItemRef.current = item;\r\n        }\r\n      } else {\r\n        enqueueFocus(item, {\r\n          preventScroll: true,\r\n          // Mac Safari does not move the virtual cursor unless the focus call\r\n          // is sync. However, for the very first focus call, we need to wait\r\n          // for the position to be ready in order to prevent unwanted\r\n          // scrolling. This means the virtual cursor will not move to the first\r\n          // item when first opening the floating element, but will on\r\n          // subsequent calls. `preventScroll` is supported in modern Safari,\r\n          // so we can use that instead.\r\n          // iOS Safari must be async or the first item will not be focused.\r\n          sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\r\n        });\r\n      }\r\n    }\r\n    const initialItem = listRef.current[indexRef.current];\r\n    if (initialItem) {\r\n      runFocus(initialItem);\r\n    }\r\n    requestAnimationFrame(() => {\r\n      const waitedItem = listRef.current[indexRef.current] || initialItem;\r\n      if (!waitedItem) return;\r\n      if (!initialItem) {\r\n        runFocus(waitedItem);\r\n      }\r\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\r\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\r\n      if (shouldScrollIntoView) {\r\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\r\n        // by all browsers.\r\n        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\r\n          block: 'nearest',\r\n          inline: 'nearest'\r\n        } : scrollIntoViewOptions);\r\n      }\r\n    });\r\n  });\r\n  index(() => {\r\n    document.createElement('div').focus({\r\n      get preventScroll() {\r\n        isPreventScrollSupported = true;\r\n        return false;\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\r\n  // element. Also, reset `activeIndex` upon closing the floating element.\r\n  index(() => {\r\n    if (!enabled) return;\r\n    if (open && elements.floating) {\r\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\r\n        // Regardless of the pointer modality, we want to ensure the selected\r\n        // item comes into view when the floating element is opened.\r\n        forceScrollIntoViewRef.current = true;\r\n        indexRef.current = selectedIndex;\r\n        onNavigate(selectedIndex);\r\n      }\r\n    } else if (previousMountedRef.current) {\r\n      // Since the user can specify `onNavigate` conditionally\r\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\r\n      // we store and call the previous function.\r\n      indexRef.current = -1;\r\n      previousOnNavigateRef.current(null);\r\n    }\r\n  }, [enabled, open, elements.floating, selectedIndex, onNavigate]);\r\n\r\n  // Sync `activeIndex` to be the focused item while the floating element is\r\n  // open.\r\n  index(() => {\r\n    if (!enabled) return;\r\n    if (open && elements.floating) {\r\n      if (activeIndex == null) {\r\n        forceSyncFocus.current = false;\r\n        if (selectedIndexRef.current != null) {\r\n          return;\r\n        }\r\n\r\n        // Reset while the floating element was open (e.g. the list changed).\r\n        if (previousMountedRef.current) {\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n        }\r\n\r\n        // Initial sync.\r\n        if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\r\n          let runs = 0;\r\n          const waitForListPopulated = () => {\r\n            if (listRef.current[0] == null) {\r\n              // Avoid letting the browser paint if possible on the first try,\r\n              // otherwise use rAF. Don't try more than twice, since something\r\n              // is wrong otherwise.\r\n              if (runs < 2) {\r\n                const scheduler = runs ? requestAnimationFrame : queueMicrotask;\r\n                scheduler(waitForListPopulated);\r\n              }\r\n              runs++;\r\n            } else {\r\n              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\r\n              keyRef.current = null;\r\n              onNavigate(indexRef.current);\r\n            }\r\n          };\r\n          waitForListPopulated();\r\n        }\r\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\r\n        indexRef.current = activeIndex;\r\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\r\n        forceScrollIntoViewRef.current = false;\r\n      }\r\n    }\r\n  }, [enabled, open, elements.floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\r\n\r\n  // Ensure the parent floating element has focus when a nested child closes\r\n  // to allow arrow key navigation to work after the pointer leaves the child.\r\n  index(() => {\r\n    var _nodes$find;\r\n    if (!enabled || elements.floating || !tree || virtual || !previousMountedRef.current) {\r\n      return;\r\n    }\r\n    const nodes = tree.nodesRef.current;\r\n    const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;\r\n    const activeEl = activeElement(getDocument(elements.floating));\r\n    const treeContainsActiveEl = nodes.some(node => node.context && contains(node.context.elements.floating, activeEl));\r\n    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {\r\n      parent.focus({\r\n        preventScroll: true\r\n      });\r\n    }\r\n  }, [enabled, elements.floating, tree, parentId, virtual]);\r\n  index(() => {\r\n    if (!enabled) return;\r\n    if (!tree) return;\r\n    if (!virtual) return;\r\n    if (parentId) return;\r\n    function handleVirtualFocus(item) {\r\n      setVirtualId(item.id);\r\n      if (virtualItemRef) {\r\n        virtualItemRef.current = item;\r\n      }\r\n    }\r\n    tree.events.on('virtualfocus', handleVirtualFocus);\r\n    return () => {\r\n      tree.events.off('virtualfocus', handleVirtualFocus);\r\n    };\r\n  }, [enabled, tree, virtual, parentId, virtualItemRef]);\r\n  index(() => {\r\n    previousOnNavigateRef.current = onNavigate;\r\n    previousMountedRef.current = !!elements.floating;\r\n  });\r\n  index(() => {\r\n    if (!open) {\r\n      keyRef.current = null;\r\n    }\r\n  }, [open]);\r\n  index(() => {\r\n    previousOpenRef.current = open;\r\n  }, [open]);\r\n  const hasActiveIndex = activeIndex != null;\r\n  const item = React.useMemo(() => {\r\n    function syncCurrentTarget(currentTarget) {\r\n      if (!open) return;\r\n      const index = listRef.current.indexOf(currentTarget);\r\n      if (index !== -1) {\r\n        onNavigate(index);\r\n      }\r\n    }\r\n    const props = {\r\n      onFocus(_ref) {\r\n        let {\r\n          currentTarget\r\n        } = _ref;\r\n        syncCurrentTarget(currentTarget);\r\n      },\r\n      onClick: _ref2 => {\r\n        let {\r\n          currentTarget\r\n        } = _ref2;\r\n        return currentTarget.focus({\r\n          preventScroll: true\r\n        });\r\n      },\r\n      // Safari\r\n      ...(focusItemOnHover && {\r\n        onMouseMove(_ref3) {\r\n          let {\r\n            currentTarget\r\n          } = _ref3;\r\n          syncCurrentTarget(currentTarget);\r\n        },\r\n        onPointerLeave(_ref4) {\r\n          let {\r\n            pointerType\r\n          } = _ref4;\r\n          if (!isPointerModalityRef.current || pointerType === 'touch') {\r\n            return;\r\n          }\r\n          indexRef.current = -1;\r\n          focusItem(listRef, indexRef);\r\n          onNavigate(null);\r\n          if (!virtual) {\r\n            enqueueFocus(floatingFocusElementRef.current, {\r\n              preventScroll: true\r\n            });\r\n          }\r\n        }\r\n      })\r\n    };\r\n    return props;\r\n  }, [open, floatingFocusElementRef, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\r\n  const commonOnKeyDown = useEffectEvent(event => {\r\n    isPointerModalityRef.current = false;\r\n    forceSyncFocus.current = true;\r\n\r\n    // When composing a character, Chrome fires ArrowDown twice. Firefox/Safari\r\n    // don't appear to suffer from this. `event.isComposing` is avoided due to\r\n    // Safari not supporting it properly (although it's not needed in the first\r\n    // place for Safari, just avoiding any possible issues).\r\n    if (event.which === 229) {\r\n      return;\r\n    }\r\n\r\n    // If the floating element is animating out, ignore navigation. Otherwise,\r\n    // the `activeIndex` gets set to 0 despite not being open so the next time\r\n    // the user ArrowDowns, the first item won't be focused.\r\n    if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {\r\n      return;\r\n    }\r\n    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\r\n      stopEvent(event);\r\n      onOpenChange(false, event.nativeEvent, 'list-navigation');\r\n      if (isHTMLElement(elements.domReference)) {\r\n        if (virtual) {\r\n          tree == null || tree.events.emit('virtualfocus', elements.domReference);\r\n        } else {\r\n          elements.domReference.focus();\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    const currentIndex = indexRef.current;\r\n    const minIndex = getMinIndex(listRef, disabledIndices);\r\n    const maxIndex = getMaxIndex(listRef, disabledIndices);\r\n    if (!typeableComboboxReference) {\r\n      if (event.key === 'Home') {\r\n        stopEvent(event);\r\n        indexRef.current = minIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n      if (event.key === 'End') {\r\n        stopEvent(event);\r\n        indexRef.current = maxIndex;\r\n        onNavigate(indexRef.current);\r\n      }\r\n    }\r\n\r\n    // Grid navigation.\r\n    if (cols > 1) {\r\n      const sizes = itemSizes || Array.from({\r\n        length: listRef.current.length\r\n      }, () => ({\r\n        width: 1,\r\n        height: 1\r\n      }));\r\n      // To calculate movements on the grid, we use hypothetical cell indices\r\n      // as if every item was 1x1, then convert back to real indices.\r\n      const cellMap = buildCellMap(sizes, cols, dense);\r\n      const minGridIndex = cellMap.findIndex(index => index != null && !isDisabled(listRef.current, index, disabledIndices));\r\n      // last enabled index\r\n      const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex) => index != null && !isDisabled(listRef.current, index, disabledIndices) ? cellIndex : foundIndex, -1);\r\n      const index = cellMap[getGridNavigatedIndex({\r\n        current: cellMap.map(itemIndex => itemIndex != null ? listRef.current[itemIndex] : null)\r\n      }, {\r\n        event,\r\n        orientation,\r\n        loop,\r\n        rtl,\r\n        cols,\r\n        // treat undefined (empty grid spaces) as disabled indices so we\r\n        // don't end up in them\r\n        disabledIndices: getCellIndices([...(disabledIndices || listRef.current.map((_, index) => isDisabled(listRef.current, index) ? index : undefined)), undefined], cellMap),\r\n        minIndex: minGridIndex,\r\n        maxIndex: maxGridIndex,\r\n        prevIndex: getCellIndexOfCorner(indexRef.current > maxIndex ? minIndex : indexRef.current, sizes, cellMap, cols,\r\n        // use a corner matching the edge closest to the direction\r\n        // we're moving in so we don't end up in the same item. Prefer\r\n        // top/left over bottom/right.\r\n        event.key === ARROW_DOWN ? 'bl' : event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT) ? 'tr' : 'tl'),\r\n        stopEvent: true\r\n      })];\r\n      if (index != null) {\r\n        indexRef.current = index;\r\n        onNavigate(indexRef.current);\r\n      }\r\n      if (orientation === 'both') {\r\n        return;\r\n      }\r\n    }\r\n    if (isMainOrientationKey(event.key, orientation)) {\r\n      stopEvent(event);\r\n\r\n      // Reset the index if no item is focused.\r\n      if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {\r\n        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\r\n        onNavigate(indexRef.current);\r\n        return;\r\n      }\r\n      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\r\n        if (loop) {\r\n          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\r\n            startingIndex: currentIndex,\r\n            disabledIndices\r\n          });\r\n        } else {\r\n          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\r\n            startingIndex: currentIndex,\r\n            disabledIndices\r\n          }));\r\n        }\r\n      } else {\r\n        if (loop) {\r\n          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\r\n            startingIndex: currentIndex,\r\n            decrement: true,\r\n            disabledIndices\r\n          });\r\n        } else {\r\n          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\r\n            startingIndex: currentIndex,\r\n            decrement: true,\r\n            disabledIndices\r\n          }));\r\n        }\r\n      }\r\n      if (isIndexOutOfBounds(listRef, indexRef.current)) {\r\n        onNavigate(null);\r\n      } else {\r\n        onNavigate(indexRef.current);\r\n      }\r\n    }\r\n  });\r\n  const ariaActiveDescendantProp = React.useMemo(() => {\r\n    return virtual && open && hasActiveIndex && {\r\n      'aria-activedescendant': virtualId || activeId\r\n    };\r\n  }, [virtual, open, hasActiveIndex, virtualId, activeId]);\r\n  const floating = React.useMemo(() => {\r\n    return {\r\n      'aria-orientation': orientation === 'both' ? undefined : orientation,\r\n      ...(!isTypeableCombobox(elements.domReference) && ariaActiveDescendantProp),\r\n      onKeyDown: commonOnKeyDown,\r\n      onPointerMove() {\r\n        isPointerModalityRef.current = true;\r\n      }\r\n    };\r\n  }, [ariaActiveDescendantProp, commonOnKeyDown, elements.domReference, orientation]);\r\n  const reference = React.useMemo(() => {\r\n    function checkVirtualMouse(event) {\r\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    function checkVirtualPointer(event) {\r\n      // `pointerdown` fires first, reset the state then perform the checks.\r\n      focusItemOnOpenRef.current = focusItemOnOpen;\r\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\r\n        focusItemOnOpenRef.current = true;\r\n      }\r\n    }\r\n    return {\r\n      ...ariaActiveDescendantProp,\r\n      onKeyDown(event) {\r\n        isPointerModalityRef.current = false;\r\n        const isArrowKey = event.key.startsWith('Arrow');\r\n        const isHomeOrEndKey = ['Home', 'End'].includes(event.key);\r\n        const isMoveKey = isArrowKey || isHomeOrEndKey;\r\n        const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\r\n        const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);\r\n        const isMainKey = isMainOrientationKey(event.key, orientation);\r\n        const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';\r\n        if (virtual && open) {\r\n          const rootNode = tree == null ? void 0 : tree.nodesRef.current.find(node => node.parentId == null);\r\n          const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;\r\n          if (isMoveKey && deepestNode && virtualItemRef) {\r\n            const eventObject = new KeyboardEvent('keydown', {\r\n              key: event.key,\r\n              bubbles: true\r\n            });\r\n            if (isCrossOpenKey || isCrossCloseKey) {\r\n              var _deepestNode$context, _deepestNode$context2;\r\n              const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;\r\n              const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find(item => (item == null ? void 0 : item.id) === activeId) : null;\r\n              if (dispatchItem) {\r\n                stopEvent(event);\r\n                dispatchItem.dispatchEvent(eventObject);\r\n                setVirtualId(undefined);\r\n              }\r\n            }\r\n            if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {\r\n              if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {\r\n                var _deepestNode$context$;\r\n                stopEvent(event);\r\n                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);\r\n                return;\r\n              }\r\n            }\r\n          }\r\n          return commonOnKeyDown(event);\r\n        }\r\n\r\n        // If a floating element should not open on arrow key down, avoid\r\n        // setting `activeIndex` while it's closed.\r\n        if (!open && !openOnArrowKeyDown && isArrowKey) {\r\n          return;\r\n        }\r\n        if (isNavigationKey) {\r\n          keyRef.current = nested && isMainKey ? null : event.key;\r\n        }\r\n        if (nested) {\r\n          if (isCrossOpenKey) {\r\n            stopEvent(event);\r\n            if (open) {\r\n              indexRef.current = getMinIndex(listRef, disabledIndicesRef.current);\r\n              onNavigate(indexRef.current);\r\n            } else {\r\n              onOpenChange(true, event.nativeEvent, 'list-navigation');\r\n            }\r\n          }\r\n          return;\r\n        }\r\n        if (isMainKey) {\r\n          if (selectedIndex != null) {\r\n            indexRef.current = selectedIndex;\r\n          }\r\n          stopEvent(event);\r\n          if (!open && openOnArrowKeyDown) {\r\n            onOpenChange(true, event.nativeEvent, 'list-navigation');\r\n          } else {\r\n            commonOnKeyDown(event);\r\n          }\r\n          if (open) {\r\n            onNavigate(indexRef.current);\r\n          }\r\n        }\r\n      },\r\n      onFocus() {\r\n        if (open && !virtual) {\r\n          onNavigate(null);\r\n        }\r\n      },\r\n      onPointerDown: checkVirtualPointer,\r\n      onMouseDown: checkVirtualMouse,\r\n      onClick: checkVirtualMouse\r\n    };\r\n  }, [activeId, ariaActiveDescendantProp, commonOnKeyDown, disabledIndicesRef, focusItemOnOpen, listRef, nested, onNavigate, onOpenChange, open, openOnArrowKeyDown, orientation, rtl, selectedIndex, tree, virtual, virtualItemRef]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference,\r\n    floating,\r\n    item\r\n  } : {}, [enabled, reference, floating, item]);\r\n}\r\n\r\nconst componentRoleToAriaRoleMap = /*#__PURE__*/new Map([['select', 'listbox'], ['combobox', 'listbox'], ['label', false]]);\r\n\r\n/**\r\n * Adds base screen reader props to the reference and floating elements for a\r\n * given floating element `role`.\r\n * @see https://floating-ui.com/docs/useRole\r\n */\r\nfunction useRole(context, props) {\r\n  var _componentRoleToAriaR;\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    floatingId\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    role = 'dialog'\r\n  } = props;\r\n  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;\r\n  const referenceId = useId();\r\n  const parentId = useFloatingParentNodeId();\r\n  const isNested = parentId != null;\r\n  const reference = React.useMemo(() => {\r\n    if (ariaRole === 'tooltip' || role === 'label') {\r\n      return {\r\n        [\"aria-\" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined\r\n      };\r\n    }\r\n    return {\r\n      'aria-expanded': open ? 'true' : 'false',\r\n      'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole,\r\n      'aria-controls': open ? floatingId : undefined,\r\n      ...(ariaRole === 'listbox' && {\r\n        role: 'combobox'\r\n      }),\r\n      ...(ariaRole === 'menu' && {\r\n        id: referenceId\r\n      }),\r\n      ...(ariaRole === 'menu' && isNested && {\r\n        role: 'menuitem'\r\n      }),\r\n      ...(role === 'select' && {\r\n        'aria-autocomplete': 'none'\r\n      }),\r\n      ...(role === 'combobox' && {\r\n        'aria-autocomplete': 'list'\r\n      })\r\n    };\r\n  }, [ariaRole, floatingId, isNested, open, referenceId, role]);\r\n  const floating = React.useMemo(() => {\r\n    const floatingProps = {\r\n      id: floatingId,\r\n      ...(ariaRole && {\r\n        role: ariaRole\r\n      })\r\n    };\r\n    if (ariaRole === 'tooltip' || role === 'label') {\r\n      return floatingProps;\r\n    }\r\n    return {\r\n      ...floatingProps,\r\n      ...(ariaRole === 'menu' && {\r\n        'aria-labelledby': referenceId\r\n      })\r\n    };\r\n  }, [ariaRole, floatingId, referenceId, role]);\r\n  const item = React.useCallback(_ref => {\r\n    let {\r\n      active,\r\n      selected\r\n    } = _ref;\r\n    const commonProps = {\r\n      role: 'option',\r\n      ...(active && {\r\n        id: floatingId + \"-option\"\r\n      })\r\n    };\r\n\r\n    // For `menu`, we are unable to tell if the item is a `menuitemradio`\r\n    // or `menuitemcheckbox`. For backwards-compatibility reasons, also\r\n    // avoid defaulting to `menuitem` as it may overwrite custom role props.\r\n    switch (role) {\r\n      case 'select':\r\n        return {\r\n          ...commonProps,\r\n          'aria-selected': active && selected\r\n        };\r\n      case 'combobox':\r\n        {\r\n          return {\r\n            ...commonProps,\r\n            ...(active && {\r\n              'aria-selected': true\r\n            })\r\n          };\r\n        }\r\n    }\r\n    return {};\r\n  }, [floatingId, role]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference,\r\n    floating,\r\n    item\r\n  } : {}, [enabled, reference, floating, item]);\r\n}\r\n\r\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\r\n// like `background-color`.\r\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\r\nfunction execWithArgsOrReturn(valueOrFn, args) {\r\n  return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;\r\n}\r\nfunction useDelayUnmount(open, durationMs) {\r\n  const [isMounted, setIsMounted] = React.useState(open);\r\n  if (open && !isMounted) {\r\n    setIsMounted(true);\r\n  }\r\n  React.useEffect(() => {\r\n    if (!open && isMounted) {\r\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [open, isMounted, durationMs]);\r\n  return isMounted;\r\n}\r\n/**\r\n * Provides a status string to apply CSS transitions to a floating element,\r\n * correctly handling placement-aware transitions.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\r\n */\r\nfunction useTransitionStatus(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    open,\r\n    elements: {\r\n      floating\r\n    }\r\n  } = context;\r\n  const {\r\n    duration = 250\r\n  } = props;\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  const [status, setStatus] = React.useState('unmounted');\r\n  const isMounted = useDelayUnmount(open, closeDuration);\r\n  if (!isMounted && status === 'close') {\r\n    setStatus('unmounted');\r\n  }\r\n  index(() => {\r\n    if (!floating) return;\r\n    if (open) {\r\n      setStatus('initial');\r\n      const frame = requestAnimationFrame(() => {\r\n        setStatus('open');\r\n      });\r\n      return () => {\r\n        cancelAnimationFrame(frame);\r\n      };\r\n    }\r\n    setStatus('close');\r\n  }, [open, floating]);\r\n  return {\r\n    isMounted,\r\n    status\r\n  };\r\n}\r\n/**\r\n * Provides styles to apply CSS transitions to a floating element, correctly\r\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\r\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\r\n */\r\nfunction useTransitionStyles(context, props) {\r\n  if (props === void 0) {\r\n    props = {};\r\n  }\r\n  const {\r\n    initial: unstable_initial = {\r\n      opacity: 0\r\n    },\r\n    open: unstable_open,\r\n    close: unstable_close,\r\n    common: unstable_common,\r\n    duration = 250\r\n  } = props;\r\n  const placement = context.placement;\r\n  const side = placement.split('-')[0];\r\n  const fnArgs = React.useMemo(() => ({\r\n    side,\r\n    placement\r\n  }), [side, placement]);\r\n  const isNumberDuration = typeof duration === 'number';\r\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\r\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\r\n  const [styles, setStyles] = React.useState(() => ({\r\n    ...execWithArgsOrReturn(unstable_common, fnArgs),\r\n    ...execWithArgsOrReturn(unstable_initial, fnArgs)\r\n  }));\r\n  const {\r\n    isMounted,\r\n    status\r\n  } = useTransitionStatus(context, {\r\n    duration\r\n  });\r\n  const initialRef = useLatestRef(unstable_initial);\r\n  const openRef = useLatestRef(unstable_open);\r\n  const closeRef = useLatestRef(unstable_close);\r\n  const commonRef = useLatestRef(unstable_common);\r\n  index(() => {\r\n    const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\r\n    const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\r\n    const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\r\n    const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key) => {\r\n      acc[key] = '';\r\n      return acc;\r\n    }, {});\r\n    if (status === 'initial') {\r\n      setStyles(styles => ({\r\n        transitionProperty: styles.transitionProperty,\r\n        ...commonStyles,\r\n        ...initialStyles\r\n      }));\r\n    }\r\n    if (status === 'open') {\r\n      setStyles({\r\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: openDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...openStyles\r\n      });\r\n    }\r\n    if (status === 'close') {\r\n      const styles = closeStyles || initialStyles;\r\n      setStyles({\r\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\r\n        transitionDuration: closeDuration + \"ms\",\r\n        ...commonStyles,\r\n        ...styles\r\n      });\r\n    }\r\n  }, [closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status, fnArgs]);\r\n  return {\r\n    isMounted,\r\n    styles\r\n  };\r\n}\r\n\r\n/**\r\n * Provides a matching callback that can be used to focus an item as the user\r\n * types, often used in tandem with `useListNavigation()`.\r\n * @see https://floating-ui.com/docs/useTypeahead\r\n */\r\nfunction useTypeahead(context, props) {\r\n  var _ref;\r\n  const {\r\n    open,\r\n    dataRef\r\n  } = context;\r\n  const {\r\n    listRef,\r\n    activeIndex,\r\n    onMatch: unstable_onMatch,\r\n    onTypingChange: unstable_onTypingChange,\r\n    enabled = true,\r\n    findMatch = null,\r\n    resetMs = 750,\r\n    ignoreKeys = [],\r\n    selectedIndex = null\r\n  } = props;\r\n  const timeoutIdRef = React.useRef();\r\n  const stringRef = React.useRef('');\r\n  const prevIndexRef = React.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\r\n  const matchIndexRef = React.useRef(null);\r\n  const onMatch = useEffectEvent(unstable_onMatch);\r\n  const onTypingChange = useEffectEvent(unstable_onTypingChange);\r\n  const findMatchRef = useLatestRef(findMatch);\r\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\r\n  index(() => {\r\n    if (open) {\r\n      clearTimeout(timeoutIdRef.current);\r\n      matchIndexRef.current = null;\r\n      stringRef.current = '';\r\n    }\r\n  }, [open]);\r\n  index(() => {\r\n    // Sync arrow key navigation but not typeahead navigation.\r\n    if (open && stringRef.current === '') {\r\n      var _ref2;\r\n      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\r\n    }\r\n  }, [open, selectedIndex, activeIndex]);\r\n  const setTypingChange = useEffectEvent(value => {\r\n    if (value) {\r\n      if (!dataRef.current.typing) {\r\n        dataRef.current.typing = value;\r\n        onTypingChange(value);\r\n      }\r\n    } else {\r\n      if (dataRef.current.typing) {\r\n        dataRef.current.typing = value;\r\n        onTypingChange(value);\r\n      }\r\n    }\r\n  });\r\n  const onKeyDown = useEffectEvent(event => {\r\n    function getMatchingIndex(list, orderedList, string) {\r\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\r\n      return str ? list.indexOf(str) : -1;\r\n    }\r\n    const listContent = listRef.current;\r\n    if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\r\n      if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\r\n        setTypingChange(false);\r\n      } else if (event.key === ' ') {\r\n        stopEvent(event);\r\n      }\r\n    }\r\n    if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\r\n    // Character key.\r\n    event.key.length !== 1 ||\r\n    // Modifier key.\r\n    event.ctrlKey || event.metaKey || event.altKey) {\r\n      return;\r\n    }\r\n    if (open && event.key !== ' ') {\r\n      stopEvent(event);\r\n      setTypingChange(true);\r\n    }\r\n\r\n    // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\r\n    // allow it in this case, too.\r\n    const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\r\n      var _text$, _text$2;\r\n      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\r\n    });\r\n\r\n    // Allows the user to cycle through items that start with the same letter\r\n    // in rapid succession.\r\n    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\r\n      stringRef.current = '';\r\n      prevIndexRef.current = matchIndexRef.current;\r\n    }\r\n    stringRef.current += event.key;\r\n    clearTimeout(timeoutIdRef.current);\r\n    timeoutIdRef.current = setTimeout(() => {\r\n      stringRef.current = '';\r\n      prevIndexRef.current = matchIndexRef.current;\r\n      setTypingChange(false);\r\n    }, resetMs);\r\n    const prevIndex = prevIndexRef.current;\r\n    const index = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);\r\n    if (index !== -1) {\r\n      onMatch(index);\r\n      matchIndexRef.current = index;\r\n    } else if (event.key !== ' ') {\r\n      stringRef.current = '';\r\n      setTypingChange(false);\r\n    }\r\n  });\r\n  const reference = React.useMemo(() => ({\r\n    onKeyDown\r\n  }), [onKeyDown]);\r\n  const floating = React.useMemo(() => {\r\n    return {\r\n      onKeyDown,\r\n      onKeyUp(event) {\r\n        if (event.key === ' ') {\r\n          setTypingChange(false);\r\n        }\r\n      }\r\n    };\r\n  }, [onKeyDown, setTypingChange]);\r\n  return React.useMemo(() => enabled ? {\r\n    reference,\r\n    floating\r\n  } : {}, [enabled, reference, floating]);\r\n}\r\n\r\nfunction getArgsWithCustomFloatingHeight(state, height) {\r\n  return {\r\n    ...state,\r\n    rects: {\r\n      ...state.rects,\r\n      floating: {\r\n        ...state.rects.floating,\r\n        height\r\n      }\r\n    }\r\n  };\r\n}\r\n/**\r\n * Positions the floating element such that an inner element inside of it is\r\n * anchored to the reference element.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nconst inner = props => ({\r\n  name: 'inner',\r\n  options: props,\r\n  async fn(state) {\r\n    const {\r\n      listRef,\r\n      overflowRef,\r\n      onFallbackChange,\r\n      offset: innerOffset = 0,\r\n      index = 0,\r\n      minItemsVisible = 4,\r\n      referenceOverflowThreshold = 0,\r\n      scrollRef,\r\n      ...detectOverflowOptions\r\n    } = evaluate(props, state);\r\n    const {\r\n      rects,\r\n      elements: {\r\n        floating\r\n      }\r\n    } = state;\r\n    const item = listRef.current[index];\r\n    const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;\r\n\r\n    // Valid combinations:\r\n    // 1. Floating element is the scrollRef and has a border (default)\r\n    // 2. Floating element is not the scrollRef, floating element has a border\r\n    // 3. Floating element is not the scrollRef, scrollRef has a border\r\n    // Floating > {...getFloatingProps()} wrapper > scrollRef > items is not\r\n    // allowed as VoiceOver doesn't work.\r\n    const clientTop = floating.clientTop || scrollEl.clientTop;\r\n    const floatingIsBordered = floating.clientTop !== 0;\r\n    const scrollElIsBordered = scrollEl.clientTop !== 0;\r\n    const floatingIsScrollEl = floating === scrollEl;\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n      if (!state.placement.startsWith('bottom')) {\r\n        warn('`placement` side must be \"bottom\" when using the `inner`', 'middleware.');\r\n      }\r\n    }\r\n    if (!item) {\r\n      return {};\r\n    }\r\n    const nextArgs = {\r\n      ...state,\r\n      ...(await offset(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\r\n    };\r\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);\r\n    const refOverflow = await detectOverflow(nextArgs, {\r\n      ...detectOverflowOptions,\r\n      elementContext: 'reference'\r\n    });\r\n    const diffY = max(0, overflow.top);\r\n    const nextY = nextArgs.y + diffY;\r\n    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;\r\n    const rounder = isScrollable ? v => v : round;\r\n    const maxHeight = rounder(max(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - max(0, overflow.bottom)));\r\n    scrollEl.style.maxHeight = maxHeight + \"px\";\r\n    scrollEl.scrollTop = diffY;\r\n\r\n    // There is not enough space, fallback to standard anchored positioning\r\n    if (onFallbackChange) {\r\n      const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * min(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;\r\n      ReactDOM.flushSync(() => onFallbackChange(shouldFallback));\r\n    }\r\n    if (overflowRef) {\r\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\r\n        ...nextArgs,\r\n        y: nextY\r\n      }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);\r\n    }\r\n    return {\r\n      y: nextY\r\n    };\r\n  }\r\n});\r\n/**\r\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\r\n * expand the floating element's height, revealing more list items.\r\n * @see https://floating-ui.com/docs/inner\r\n */\r\nfunction useInnerOffset(context, props) {\r\n  const {\r\n    open,\r\n    elements\r\n  } = context;\r\n  const {\r\n    enabled = true,\r\n    overflowRef,\r\n    scrollRef,\r\n    onChange: unstable_onChange\r\n  } = props;\r\n  const onChange = useEffectEvent(unstable_onChange);\r\n  const controlledScrollingRef = React.useRef(false);\r\n  const prevScrollTopRef = React.useRef(null);\r\n  const initialOverflowRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (!enabled) return;\r\n    function onWheel(e) {\r\n      if (e.ctrlKey || !el || overflowRef.current == null) {\r\n        return;\r\n      }\r\n      const dY = e.deltaY;\r\n      const isAtTop = overflowRef.current.top >= -0.5;\r\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\r\n      const remainingScroll = el.scrollHeight - el.clientHeight;\r\n      const sign = dY < 0 ? -1 : 1;\r\n      const method = dY < 0 ? 'max' : 'min';\r\n      if (el.scrollHeight <= el.clientHeight) {\r\n        return;\r\n      }\r\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\r\n        e.preventDefault();\r\n        ReactDOM.flushSync(() => {\r\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\r\n        });\r\n      } else if (/firefox/i.test(getUserAgent())) {\r\n        // Needed to propagate scrolling during momentum scrolling phase once\r\n        // it gets limited by the boundary. UX improvement, not critical.\r\n        el.scrollTop += dY;\r\n      }\r\n    }\r\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n    if (open && el) {\r\n      el.addEventListener('wheel', onWheel);\r\n\r\n      // Wait for the position to be ready.\r\n      requestAnimationFrame(() => {\r\n        prevScrollTopRef.current = el.scrollTop;\r\n        if (overflowRef.current != null) {\r\n          initialOverflowRef.current = {\r\n            ...overflowRef.current\r\n          };\r\n        }\r\n      });\r\n      return () => {\r\n        prevScrollTopRef.current = null;\r\n        initialOverflowRef.current = null;\r\n        el.removeEventListener('wheel', onWheel);\r\n      };\r\n    }\r\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\r\n  const floating = React.useMemo(() => ({\r\n    onKeyDown() {\r\n      controlledScrollingRef.current = true;\r\n    },\r\n    onWheel() {\r\n      controlledScrollingRef.current = false;\r\n    },\r\n    onPointerMove() {\r\n      controlledScrollingRef.current = false;\r\n    },\r\n    onScroll() {\r\n      const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\r\n      if (!overflowRef.current || !el || !controlledScrollingRef.current) {\r\n        return;\r\n      }\r\n      if (prevScrollTopRef.current !== null) {\r\n        const scrollDiff = el.scrollTop - prevScrollTopRef.current;\r\n        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\r\n          ReactDOM.flushSync(() => onChange(d => d + scrollDiff));\r\n        }\r\n      }\r\n\r\n      // [Firefox] Wait for the height change to have been applied.\r\n      requestAnimationFrame(() => {\r\n        prevScrollTopRef.current = el.scrollTop;\r\n      });\r\n    }\r\n  }), [elements.floating, onChange, overflowRef, scrollRef]);\r\n  return React.useMemo(() => enabled ? {\r\n    floating\r\n  } : {}, [enabled, floating]);\r\n}\r\n\r\nfunction isPointInPolygon(point, polygon) {\r\n  const [x, y] = point;\r\n  let isInside = false;\r\n  const length = polygon.length;\r\n  for (let i = 0, j = length - 1; i < length; j = i++) {\r\n    const [xi, yi] = polygon[i] || [0, 0];\r\n    const [xj, yj] = polygon[j] || [0, 0];\r\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n    if (intersect) {\r\n      isInside = !isInside;\r\n    }\r\n  }\r\n  return isInside;\r\n}\r\nfunction isInside(point, rect) {\r\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\r\n}\r\n/**\r\n * Generates a safe polygon area that the user can traverse without closing the\r\n * floating element once leaving the reference element.\r\n * @see https://floating-ui.com/docs/useHover#safepolygon\r\n */\r\nfunction safePolygon(options) {\r\n  if (options === void 0) {\r\n    options = {};\r\n  }\r\n  const {\r\n    buffer = 0.5,\r\n    blockPointerEvents = false,\r\n    requireIntent = true\r\n  } = options;\r\n  let timeoutId;\r\n  let hasLanded = false;\r\n  let lastX = null;\r\n  let lastY = null;\r\n  let lastCursorTime = performance.now();\r\n  function getCursorSpeed(x, y) {\r\n    const currentTime = performance.now();\r\n    const elapsedTime = currentTime - lastCursorTime;\r\n    if (lastX === null || lastY === null || elapsedTime === 0) {\r\n      lastX = x;\r\n      lastY = y;\r\n      lastCursorTime = currentTime;\r\n      return null;\r\n    }\r\n    const deltaX = x - lastX;\r\n    const deltaY = y - lastY;\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    const speed = distance / elapsedTime; // px / ms\r\n\r\n    lastX = x;\r\n    lastY = y;\r\n    lastCursorTime = currentTime;\r\n    return speed;\r\n  }\r\n  const fn = _ref => {\r\n    let {\r\n      x,\r\n      y,\r\n      placement,\r\n      elements,\r\n      onClose,\r\n      nodeId,\r\n      tree\r\n    } = _ref;\r\n    return function onMouseMove(event) {\r\n      function close() {\r\n        clearTimeout(timeoutId);\r\n        onClose();\r\n      }\r\n      clearTimeout(timeoutId);\r\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\r\n        return;\r\n      }\r\n      const {\r\n        clientX,\r\n        clientY\r\n      } = event;\r\n      const clientPoint = [clientX, clientY];\r\n      const target = getTarget(event);\r\n      const isLeave = event.type === 'mouseleave';\r\n      const isOverFloatingEl = contains(elements.floating, target);\r\n      const isOverReferenceEl = contains(elements.domReference, target);\r\n      const refRect = elements.domReference.getBoundingClientRect();\r\n      const rect = elements.floating.getBoundingClientRect();\r\n      const side = placement.split('-')[0];\r\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\r\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\r\n      const isOverReferenceRect = isInside(clientPoint, refRect);\r\n      const isFloatingWider = rect.width > refRect.width;\r\n      const isFloatingTaller = rect.height > refRect.height;\r\n      const left = (isFloatingWider ? refRect : rect).left;\r\n      const right = (isFloatingWider ? refRect : rect).right;\r\n      const top = (isFloatingTaller ? refRect : rect).top;\r\n      const bottom = (isFloatingTaller ? refRect : rect).bottom;\r\n      if (isOverFloatingEl) {\r\n        hasLanded = true;\r\n        if (!isLeave) {\r\n          return;\r\n        }\r\n      }\r\n      if (isOverReferenceEl) {\r\n        hasLanded = false;\r\n      }\r\n      if (isOverReferenceEl && !isLeave) {\r\n        hasLanded = true;\r\n        return;\r\n      }\r\n\r\n      // Prevent overlapping floating element from being stuck in an open-close\r\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\r\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\r\n        return;\r\n      }\r\n\r\n      // If any nested child is open, abort.\r\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\r\n        let {\r\n          context\r\n        } = _ref2;\r\n        return context == null ? void 0 : context.open;\r\n      })) {\r\n        return;\r\n      }\r\n\r\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\r\n      // creates a point where the floating element remains open, but should be\r\n      // ignored.\r\n      // A constant of 1 handles floating point rounding errors.\r\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\r\n        return close();\r\n      }\r\n\r\n      // Ignore when the cursor is within the rectangular trough between the\r\n      // two elements. Since the triangle is created from the cursor point,\r\n      // which can start beyond the ref element's edge, traversing back and\r\n      // forth from the ref to the floating element can cause it to close. This\r\n      // ensures it always remains open in that case.\r\n      let rectPoly = [];\r\n      switch (side) {\r\n        case 'top':\r\n          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];\r\n          break;\r\n        case 'bottom':\r\n          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];\r\n          break;\r\n        case 'left':\r\n          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];\r\n          break;\r\n        case 'right':\r\n          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];\r\n          break;\r\n      }\r\n      function getPolygon(_ref3) {\r\n        let [x, y] = _ref3;\r\n        switch (side) {\r\n          case 'top':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'bottom':\r\n            {\r\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\r\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n          case 'left':\r\n            {\r\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\r\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\r\n            }\r\n          case 'right':\r\n            {\r\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\r\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\r\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\r\n            }\r\n        }\r\n      }\r\n      if (isPointInPolygon([clientX, clientY], rectPoly)) {\r\n        return;\r\n      }\r\n      if (hasLanded && !isOverReferenceRect) {\r\n        return close();\r\n      }\r\n      if (!isLeave && requireIntent) {\r\n        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\r\n        const cursorSpeedThreshold = 0.1;\r\n        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\r\n          return close();\r\n        }\r\n      }\r\n      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {\r\n        close();\r\n      } else if (!hasLanded && requireIntent) {\r\n        timeoutId = window.setTimeout(close, 40);\r\n      }\r\n    };\r\n  };\r\n  fn.__options = {\r\n    blockPointerEvents\r\n  };\r\n  return fn;\r\n}\r\n\r\nexport { Composite, CompositeItem, FloatingArrow, FloatingDelayGroup, FloatingFocusManager, FloatingList, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useClientPoint, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingRootContext, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListItem, useListNavigation, useMergeRefs, useRole, useTransitionStatus, useTransitionStyles, useTypeahead };\r\n", "import { isShadowRoot, isHTMLElement } from '@floating-ui/utils/dom';\r\n\r\nfunction activeElement(doc) {\r\n  let activeElement = doc.activeElement;\r\n  while (((_activeElement = activeElement) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {\r\n    var _activeElement;\r\n    activeElement = activeElement.shadowRoot.activeElement;\r\n  }\r\n  return activeElement;\r\n}\r\nfunction contains(parent, child) {\r\n  if (!parent || !child) {\r\n    return false;\r\n  }\r\n  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();\r\n\r\n  // First, attempt with faster native method\r\n  if (parent.contains(child)) {\r\n    return true;\r\n  }\r\n\r\n  // then fallback to custom implementation with Shadow DOM support\r\n  if (rootNode && isShadowRoot(rootNode)) {\r\n    let next = child;\r\n    while (next) {\r\n      if (parent === next) {\r\n        return true;\r\n      }\r\n      // @ts-ignore\r\n      next = next.parentNode || next.host;\r\n    }\r\n  }\r\n\r\n  // Give up, the result is false\r\n  return false;\r\n}\r\n// Avoid Chrome DevTools blue warning.\r\nfunction getPlatform() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData != null && uaData.platform) {\r\n    return uaData.platform;\r\n  }\r\n  return navigator.platform;\r\n}\r\nfunction getUserAgent() {\r\n  const uaData = navigator.userAgentData;\r\n  if (uaData && Array.isArray(uaData.brands)) {\r\n    return uaData.brands.map(_ref => {\r\n      let {\r\n        brand,\r\n        version\r\n      } = _ref;\r\n      return brand + \"/\" + version;\r\n    }).join(' ');\r\n  }\r\n  return navigator.userAgent;\r\n}\r\n\r\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\r\nfunction isVirtualClick(event) {\r\n  // FIXME: Firefox is now emitting a deprecation warning for `mozInputSource`.\r\n  // Try to find a workaround for this. `react-aria` source still has the check.\r\n  if (event.mozInputSource === 0 && event.isTrusted) {\r\n    return true;\r\n  }\r\n  if (isAndroid() && event.pointerType) {\r\n    return event.type === 'click' && event.buttons === 1;\r\n  }\r\n  return event.detail === 0 && !event.pointerType;\r\n}\r\nfunction isVirtualPointerEvent(event) {\r\n  if (isJSDOM()) return false;\r\n  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse' ||\r\n  // iOS VoiceOver returns 0.333• for width/height.\r\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'touch';\r\n}\r\nfunction isSafari() {\r\n  // Chrome DevTools does not complain about navigator.vendor\r\n  return /apple/i.test(navigator.vendor);\r\n}\r\nfunction isAndroid() {\r\n  const re = /android/i;\r\n  return re.test(getPlatform()) || re.test(getUserAgent());\r\n}\r\nfunction isMac() {\r\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\r\n}\r\nfunction isJSDOM() {\r\n  return getUserAgent().includes('jsdom/');\r\n}\r\nfunction isMouseLikePointerType(pointerType, strict) {\r\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\r\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\r\n  const values = ['mouse', 'pen'];\r\n  if (!strict) {\r\n    values.push('', undefined);\r\n  }\r\n  return values.includes(pointerType);\r\n}\r\nfunction isReactEvent(event) {\r\n  return 'nativeEvent' in event;\r\n}\r\nfunction isRootElement(element) {\r\n  return element.matches('html,body');\r\n}\r\nfunction getDocument(node) {\r\n  return (node == null ? void 0 : node.ownerDocument) || document;\r\n}\r\nfunction isEventTargetWithin(event, node) {\r\n  if (node == null) {\r\n    return false;\r\n  }\r\n  if ('composedPath' in event) {\r\n    return event.composedPath().includes(node);\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\r\n  const e = event;\r\n  return e.target != null && node.contains(e.target);\r\n}\r\nfunction getTarget(event) {\r\n  if ('composedPath' in event) {\r\n    return event.composedPath()[0];\r\n  }\r\n\r\n  // TS thinks `event` is of type never as it assumes all browsers support\r\n  // `composedPath()`, but browsers without shadow DOM don't.\r\n  return event.target;\r\n}\r\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\r\nfunction isTypeableElement(element) {\r\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\r\n}\r\nfunction stopEvent(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\nfunction isTypeableCombobox(element) {\r\n  if (!element) return false;\r\n  return element.getAttribute('role') === 'combobox' && isTypeableElement(element);\r\n}\r\n\r\nexport { TYPEABLE_SELECTOR, activeElement, contains, getDocument, getPlatform, getTarget, getUserAgent, isAndroid, isEventTargetWithin, isJSDOM, isMac, isMouseLikePointerType, isReactEvent, isRootElement, isSafari, isTypeableCombobox, isTypeableElement, isVirtualClick, isVirtualPointerEvent, stopEvent };\r\n", "// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n"],
  "mappings": "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",
  "names": ["platform", "data", "offset", "shift", "flip", "size", "arrow", "React", "import_react", "candidateSelectors", "candidateSelector", "join", "NoElement", "Element", "matches", "prototype", "msMatchesSelector", "webkitMatchesSelector", "getRootNode", "element", "_element$getRootNode", "call", "ownerDocument", "focusableCandidateSelector", "candidateSelectors", "concat", "join", "ReactDOM", "React", "index", "offset", "map", "Composite", "CompositeItem", "FloatingArrow", "arrow", "shift", "isRTL", "getComputedStyle", "FocusGuard", "index", "VisuallyHiddenDismiss", "FloatingOverlay", "index", "open", "useFloating", "index", "node", "index", "offset"]
}
